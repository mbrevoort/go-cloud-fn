// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5f\x8f\xdc\xb6\x11\x7f\xd7\xa7\x98\x00\x41\x28\xd5\x3a\xc9\x09\xe2\x34\x38\x60\xd3\x22\x85\x0d\xa7\x48\x53\x37\xe7\xa2\x0f\x81\xe1\x70\xc5\x59\x89\x3e\x2e\xa9\x0c\xc9\xd5\x2d\x0e\xfa\xee\x05\x29\x4a\xda\x5d\xef\x15\x36\xd0\x97\xdd\x95\x66\x38\xf3\x9b\x7f\x3f\xce\x1e\x38\x41\xef\xb7\xd6\x6f\x61\x03\x84\x7f\x78\x49\x98\xb3\xbf\xb6\xc6\xb4\x0a\x6f\x1a\x65\xbc\xa8\x27\x39\x2b\xf2\x22\x5b\x34\x84\x71\xa8\x0f\xac\xa8\x1a\xa3\x77\xb2\xcd\x8b\x2c\xdb\x79\xdd\x38\x69\x34\xd8\x4e\xee\x21\x17\xdc\xf1\x12\x1a\xae\xd4\x96\x37\xf7\x05\x3c\x66\x00\x0a\x1d\x10\xda\xde\x68\x8b\x6f\xf8\x51\x19\x2e\x60\x03\x8c\x65\x19\x40\x5d\xc3\x5d\xcf\x07\x0d\xae\x43\x58\x6c\x71\x2d\x40\xea\x0f\xd8\xb8\xf8\x1e\xf5\x01\x76\x64\xf6\xf1\xa1\xe7\x84\xda\x41\x4f\xa6\x41\x6b\xab\x0c\xa0\x31\xda\x3a\xe8\x4f\x43\x69\x3a\xa9\xc4\xfb\xa4\xc3\x8a\x0a\x1f\xb0\x79\x25\x15\xe6\xac\xaa\x1f\x1f\xab\x57\xc9\xd1\x2f\x7c\x8f\xe3\xc8\x4a\xf8\xed\x5d\x19\xa1\x42\xf0\x75\xbb\x18\x47\x7d\x28\xe3\xdb\xba\x86\x9f\x39\xb5\xb8\xc4\x61\xc1\x1c\x90\xc0\x3a\x21\x35\x0c\x48\x18\x9f\xc9\x6b\xa9\xdb\x08\x53\xe0\x8e\x7b\xe5\xa2\x86\x81\xad\xdf\xed\x90\xaa\xd9\xd6\x9d\xd4\x0d\xc2\x80\x20\x8c\x66\x0e\x34\xa2\x00\x67\x60\x30\x74\x0f\x7c\x6b\xbc\x03\xae\x8f\x60\x5c\x87\x14\xa2\x6b\x3c\xc5\x98\x43\x78\x68\x9d\x05\x43\xe0\x50\x73\xed\x6c\x09\xad\x3c\x20\x48\x07\x1c\x3a\xe4\xca\x75\x47\xd8\xf3\x87\xe8\x68\xcf\x1f\x7e\x8c\x7e\x6f\xe1\xeb\xe7\xdf\x7e\xff\xe2\xcf\xdf\xc1\x9f\xe0\x9b\x17\x19\xc0\x58\x84\xdc\xf7\x55\x84\x5f\x59\x74\x2f\x75\x63\x84\xd4\x6d\xce\xbc\xdb\xdd\x7c\xcf\x8a\x54\x9b\x9f\x4d\x0b\xd6\x71\x2d\x38\x09\x40\x22\xd8\xa3\xb5\xbc\x45\x1b\xe0\x2e\x02\xe3\xdd\x6c\x0e\x89\x2a\xa3\x73\x16\xfa\x80\x95\x10\xbe\x60\xf3\x43\xca\x6d\x28\x94\x51\x58\x29\xd3\xc6\x46\x29\xce\xa1\x18\xef\x9e\x3e\x7b\xd9\x40\xcf\x36\x51\xa1\x72\xe6\xce\x51\x40\x7e\x6a\x2c\x58\x41\x22\x43\xac\x8c\xa8\x17\x2b\xae\x23\x33\x80\xc6\x01\x5e\x06\x71\xce\x5a\x33\xb5\xfb\xcd\x2e\x75\x30\x61\x83\xf2\x80\x31\xda\xf9\xfc\xa5\xe9\x46\x19\x8b\x41\xf4\x20\xdd\xdf\x8c\xc0\xd5\xbe\xdc\x41\xbe\xbc\xfd\x01\x9e\x17\xe9\x7d\xc0\xef\x3c\xe9\x65\x32\xf2\x13\x0c\x77\xc1\x6f\x38\x85\x02\xbc\xb6\xbe\x09\xbd\xb7\xf3\x4a\x1d\x61\x90\xae\x83\xc6\x08\xdc\x30\x78\xb6\xf8\x2b\xca\xcb\x74\x14\xd1\xcb\x98\x5d\xf5\xe4\x95\xba\x7a\x60\x9c\xab\xfc\x1f\x92\x0e\x63\xd7\x4a\xdd\x7b\x37\x65\x3e\x16\x58\x48\x7d\xd2\x28\x43\xd0\xcb\xff\x7e\xf7\xcf\x5f\x2a\x1b\x93\x2e\x77\xc7\xa9\x90\xc5\x89\x16\x6a\x91\x17\xd9\x98\x65\x75\x0d\xaf\xb9\x16\x0a\xa1\x73\xae\x9f\xbb\x77\x65\x8c\x2e\x0a\x5f\x07\x59\x4e\xf8\x47\xc4\x38\x25\x2c\xf0\x53\x52\xff\xd1\x88\x63\x80\x69\x07\xe9\x9a\x2e\x2a\x56\x2d\xba\x9c\x35\x46\x3b\xd4\xee\xc6\x1d\x7b\x64\xc5\x9c\xe8\x86\x5b\x04\xc6\xfb\x5e\xc9\x86\x07\x2f\xf5\x07\x6b\x34\xbb\x5d\xaa\xb0\x18\x85\x0d\x5c\x44\x12\x4c\x6f\x8d\x38\x16\x49\x79\x4b\xc8\xef\x9f\xb0\xfa\x70\x33\x0c\xc3\xcd\xce\xd0\xfe\xc6\x93\xc2\x30\x3e\x28\x16\x37\x75\x0d\x6f\x3b\x84\x60\x2c\xf0\x95\x45\x82\x9d\x21\x88\x9d\xb6\xb0\x9c\x05\x61\xc2\x20\x75\xd2\x96\x60\x0d\x7c\xf0\x81\xc5\x14\x3f\x02\x57\x46\xb7\xab\xa9\xd8\x04\xd2\x05\x25\xa2\x30\xde\xfa\x0b\xf8\x07\x3f\x6e\x23\x83\xd8\xce\x78\x25\x26\x0e\x24\xdf\x38\xb0\x66\x8f\x70\x2f\xb5\x00\xb3\x0b\x44\xd6\x23\xad\xa6\x02\xe0\x39\x09\x11\xde\x5f\x02\x97\x68\xe3\xaa\xc0\xd2\xcc\xc2\x3d\x62\x1f\xd8\x24\xa0\x82\x81\x1f\x23\x6e\x6d\x86\x12\xb8\x3d\x0d\x4e\x5a\x90\x16\x3a\x33\x7c\x14\xd4\x16\x3b\x7e\x40\x5b\xad\x19\x0f\x04\x73\x51\xaf\xf2\x4a\x8d\x8a\xff\x77\x8d\x4c\xe3\xd0\xdd\x58\x47\xc8\xf7\x4f\x74\xc0\x6c\xee\x09\x6b\x0e\x1f\x5c\xdd\x2b\x2e\x9f\xea\xa0\x27\xce\x8f\x59\x6a\xe2\x30\xc5\xff\x26\x95\x34\x7b\x32\xce\x34\x46\xc1\x33\x60\xb7\x75\x1d\x46\x7a\x69\xe7\xce\x58\xc7\x8a\xf4\xc6\x90\x6c\xa5\xe6\xe1\xe8\x6c\x29\x8c\xd0\xaf\xa9\x70\x9b\xd4\xec\x2c\xb8\x66\xb7\xa7\x98\xa6\xeb\x8a\x75\xc8\x05\x92\x9d\x64\x55\x7a\x4a\xb2\x3d\xba\xce\x88\x24\x9a\x1e\x92\x84\x70\x6f\x1c\xbe\xe7\x42\x50\x12\xcb\x3e\x89\x3c\x29\x76\x3b\x87\x33\x47\x18\x08\x33\x3f\x01\x56\x42\x8e\x44\x71\x8e\xbd\x72\xc5\x05\x2d\x12\xad\x6c\x18\xae\x89\x26\x32\x27\xbc\x78\xfe\x3c\xbd\x9c\xc8\x19\x89\x12\x99\xc5\xaf\xb0\x3c\x4c\x37\x01\x04\x22\x9b\x58\x9c\x8e\x8b\xa5\x24\x8b\x6d\x12\x47\x2d\x4f\xde\x27\x23\xd0\xf0\x48\x1b\xf8\x70\xe6\x3c\x58\x5b\x09\xf8\x15\x97\x6a\xba\x81\xa3\x85\xf9\x22\x98\x08\xf3\x16\x26\xea\x2d\x3e\x1b\x3a\xa1\xad\xac\xe3\xce\xdb\x48\x92\xe9\xf7\xfb\x70\xb8\x58\x15\xd0\x4d\xd2\x54\xa4\x53\x89\x16\xf9\x74\x81\x57\x61\xfb\x99\xd4\x42\xc9\x4b\x60\x5b\x6e\xf1\xbb\x6f\x59\x91\x78\x7c\x3c\x59\xc4\x9c\xe9\x65\x13\x36\x9b\x57\x64\xf6\xbf\xa2\x35\x9e\x1a\x0c\xc4\x39\xfd\x5a\x77\xb2\x9e\x93\xb3\xb1\x35\x27\x49\x65\x7b\x25\x5d\xce\xa2\x01\x5b\xc7\x81\x0c\x95\x8b\x7a\x95\x42\xdd\xba\x0e\x36\x1b\xf8\xa6\x58\xee\xe4\x78\xd3\x44\xf9\x6f\x5f\xbf\xcb\xa6\x1b\x28\xbd\x8d\xd5\x3a\xc5\x45\xe8\xe8\xf8\xc6\x6f\xef\xfc\x16\x72\x3c\xa0\x76\x25\xcc\x8d\x1e\x0b\x71\x6d\x6f\x5c\x82\x81\xcd\xf5\xc0\x26\x4b\xd5\x12\x5d\x76\xd6\x32\x93\x30\x26\x2e\x7c\x64\xe7\x3b\xc8\xef\xff\xf2\xe8\x31\x6c\x6c\x11\x5b\x20\xcc\x84\x2f\x9e\x83\x2f\x1f\xa7\xf3\xf1\xf3\x27\x31\x86\x0e\x89\x20\xe0\xcb\xc7\x05\xcc\xf8\x7b\xbc\x46\x17\xb0\xb0\x49\xab\x75\x15\x1f\xf3\x45\x71\x4e\xe7\x17\xf1\x4d\x71\x65\x27\x62\xa7\x29\xda\x4d\x4d\xb9\xc5\x86\x7b\x8b\xc9\xb6\xd7\xf7\xda\x0c\x33\x57\x5e\xde\xf4\x67\xd9\x2c\xe6\x29\x8d\x27\xab\xde\x6f\x95\xb4\x5d\x5a\xd0\x1f\x81\xf8\x70\x0b\x8e\x3c\xc2\x58\x42\xde\xfb\xed\xcb\x30\xb9\x69\xbd\xfb\x49\xd8\x8b\xe9\x9d\x14\xd6\x19\xfa\x44\xd8\xac\x84\x74\x32\x8d\x23\x2a\x8b\x57\x8d\x4c\xb5\x10\x71\x2c\xe7\xec\xaf\x68\xc6\x78\x0f\x7d\x66\x55\x4e\x46\xb1\xae\xc1\x3a\xa9\xd4\x9c\xb2\xb0\xeb\xcc\xd9\x9a\x36\xbd\xe8\xe0\xec\x4f\x48\xf8\xcf\xe0\xc3\xaf\x74\x21\x3c\x99\xe4\x79\xd9\x79\x7c\x0c\xa9\xaa\xde\x92\x6c\x5b\xa4\xd7\x6f\xdf\xbe\x81\x71\xcc\xf0\xa1\x37\x61\x3e\xd8\xc7\xff\x3b\xde\xc1\x66\x75\x77\xb1\x02\x25\xa0\xeb\x8e\xb4\xca\xb3\x31\x79\x8b\xc9\xfc\x1c\x17\x69\xea\xce\xc7\x2c\xb2\xf8\x3a\x28\xe7\x24\x7e\xe7\xe8\x7f\xf1\x78\x42\x79\xd2\x00\xb3\x8f\x68\x63\x71\x74\xc9\xe8\x93\xf1\x6b\xbc\x1d\x1c\x2e\xbe\x92\xda\x57\x5f\xa5\x03\x55\x2c\xd5\xa7\xb8\x5f\xd9\xfd\xec\xe4\xc7\x90\xce\x6a\x3b\xad\xca\x2c\xad\xe0\x6c\xa9\x6e\x4a\xb7\x16\x30\x8e\xff\x0d\x00\x00\xff\xff\xdc\x64\x12\x1b\x3c\x0f\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 3900, mode: os.FileMode(420), modTime: time.Unix(1494446573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\xcc\x5a\x63\x0a\xae\xba\x72\xe5\xd2\x23\x08\x6d\xf2\x28\x81\x76\xa6\x98\xa6\x08\x21\x77\x97\xa1\xe0\xf6\xbd\x8f\xbf\x76\x44\x2c\xe3\x0a\x1e\x88\x6b\x75\xcf\x22\x61\x4f\x2a\xaf\x71\x45\x6b\x7c\xb1\xfb\xc0\x27\x27\x15\x13\xde\x79\xe7\xcf\x35\x62\x83\x44\x48\x48\xc8\x3c\x90\x85\x6c\xd5\x1d\x72\x18\x7d\xdf\xff\x96\x88\x1f\xb3\xea\xbc\xe0\x1a\x16\x2d\xf1\xb6\x95\x29\x97\xe9\x0c\xf6\xbd\xfb\x72\x47\xd4\xba\xf6\x0b\x00\x00\xff\xff\xc2\x5c\xfd\x85\x8d\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 141, mode: os.FileMode(420), modTime: time.Unix(1494442094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

