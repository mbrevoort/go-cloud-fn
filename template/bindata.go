// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xd1\x8f\x13\xb9\x0f\x7e\xef\x5f\xe1\xdf\x0b\x99\xf9\xd1\x4e\x17\x09\x38\x54\xa9\x9c\xc4\x09\x84\x4e\x1c\x87\xd8\x45\xf7\x80\x10\xca\x26\x6e\x27\x6c\x9a\x0c\x8e\xa7\xd3\x6a\xd5\xff\xfd\x94\x4c\x66\x5a\xba\xac\xb4\x48\xf7\xb4\xdb\xb1\xf3\xd9\x8e\xbf\x7c\x36\xe1\xf7\xd6\x10\x16\x42\x7b\x46\xb7\x15\x65\xa5\xbc\x5b\x99\x75\x51\x4e\x26\xf3\x39\xbc\x95\x4e\x5b\x84\x57\x52\xdd\xac\xc9\xb7\x4e\x03\x6e\xd1\x71\x00\xa9\x94\x27\x6d\xdc\x1a\xd8\x43\x68\x50\x4d\x56\xad\x53\x6c\xbc\x83\x50\x9b\x0d\x14\x5a\xb2\x9c\x82\x92\xd6\x5e\x4b\x75\x53\xc2\xed\x04\xc0\x22\x03\x61\x68\xbc\x0b\xf8\x41\xee\xad\x97\x1a\x96\x20\x44\x36\xe1\xce\xf0\x1f\x5e\x23\x2c\x61\xf6\x64\x32\x01\x98\xcf\xe1\xb2\x91\x9d\x03\xae\x11\x46\x7c\xe9\x34\x18\xf7\x0d\x15\xa7\xef\xe8\xb6\xb0\x22\xbf\x49\x3f\x1a\x49\xe8\x18\x1a\xf2\x0a\x43\xa8\x26\x00\xca\xbb\xc0\xd0\xc0\x12\xc6\x52\x55\x6d\xac\xfe\x9a\x7d\x44\x59\xe1\x0e\xd5\x1b\x63\xb1\x10\xd5\xfc\xf6\xb6\x7a\x93\x03\xbd\x97\x1b\x3c\x1c\xc4\x14\x3e\x7f\x99\xa6\xf4\x21\xc6\x5a\x8c\xe0\xe8\xb6\xd3\xf4\x75\x23\x77\xaf\xda\xd5\x0a\x69\x01\x4f\x2e\x9e\xbe\x78\xf6\xdb\x73\xf8\x3f\x3c\xb9\x98\x00\x1c\xca\x58\x46\x53\x05\xd6\xc6\x55\x01\xf9\xb5\x53\x3e\xde\x5a\x21\x5a\x5e\xcd\x5e\x88\x32\x97\xf9\xce\xaf\x21\xb0\x74\x5a\x92\x06\x24\x82\x0d\x86\x20\xd7\x18\xd2\xf5\x0e\x06\xdf\xf2\x00\x87\x44\x95\x77\x85\x88\xd7\x2c\xa6\x10\xff\xc0\xf2\x65\x4e\x33\xd6\xec\x2d\x56\xd6\xaf\x53\x1f\xca\x1f\x53\xf1\x2d\x3f\xec\xac\xb8\x8c\xad\x24\x54\x68\xb6\xa8\xe1\xc4\xbf\x4c\xbe\xe7\xbd\x7c\xbc\x4c\xc6\x8a\xfd\x25\x53\xac\xf2\x34\x70\x8c\x88\x44\x9e\xc4\x34\x55\xf8\x90\x88\x27\xfe\xe7\x50\xca\xfa\x80\x62\x0a\x2a\x11\xe6\x01\x58\xa7\x07\xfa\xf4\xcd\x0a\x8a\x91\x73\x2f\xe1\xa2\xcc\x20\xb1\x30\x6e\xc9\x8d\xec\x2d\x1c\x76\xf0\x3a\xe6\x92\x41\xe3\x29\xd4\xd0\xba\xd0\xaa\xc8\x85\x55\x6b\xed\x1e\x3a\xc3\x75\x82\x5f\x0a\x78\xdc\xc7\x99\x9e\xdf\x51\x1f\xf9\x30\xf9\x69\x94\xd6\xda\x9f\x1e\x38\x0c\x34\xf9\x87\x0c\x63\x22\xba\x71\x4d\xcb\x7d\xeb\x12\x43\xb4\x71\x27\x4c\xeb\xa2\x5f\xf1\xe7\xe5\xdf\xef\xab\x90\x3a\x61\x56\xfb\x9e\x09\xe5\x89\x17\x3a\x5d\x94\x93\xc3\xe9\x43\xaf\x99\x9b\xf4\x50\x30\xf0\xf1\x45\xd7\xc9\xf8\x36\xda\x0a\xc2\xef\x29\xc7\xfe\xb2\xb6\x92\x06\xf7\x57\x5e\xef\x63\x9a\xa1\x33\xac\xea\xe4\x58\xad\x91\x0b\xa1\xbc\x63\x74\x3c\xe3\x7d\x83\xa2\x1c\x2e\x59\xc9\x80\x20\x64\xd3\x58\xa3\x64\x8c\x32\xff\x16\xbc\x13\x8b\xb1\x03\x23\x28\x2c\xe1\xac\x92\x08\x7d\xed\xf5\xbe\xcc\xce\xd7\x84\xf2\xe6\x1e\xd4\xdd\xac\xeb\xba\xd9\xca\xd3\x66\xd6\x92\xc5\xf8\xfe\x50\x8f\x61\xe6\x73\xb8\xaa\x11\x22\x58\xd4\x8e\x80\x04\x2b\x4f\x91\x2b\xad\x1e\x15\x27\x80\xf6\xf1\x25\xd6\x26\x4c\x21\x78\xf8\xd6\x46\x45\xb1\x72\x0f\xd2\x7a\xb7\x3e\x42\x25\x02\x18\x8e\x4e\x44\x7b\xd8\x48\xf7\x3f\xf8\x4b\xee\xaf\x11\x3a\x84\x50\xfb\xd6\xea\x5e\x8f\xa8\x55\x0c\xc1\x6f\x10\x6e\x8c\xd3\xe0\x57\x51\x54\x1a\xa4\x23\x54\x4c\x78\xb8\x84\x94\xde\xef\xe0\x09\x9c\xe7\x2a\x4a\xa5\x08\x70\x83\xd8\x80\xe1\x94\x15\x74\x72\x9f\xf2\x76\xbe\x9b\x82\x0c\xa7\xc5\x99\x00\x26\x40\xed\xbb\x3b\x45\x5d\x63\x2d\xb7\x98\x44\x32\xdf\x78\x54\xa8\xb3\x7e\x4d\x7f\xd2\xa3\xf2\xbf\xee\x91\x57\x8c\x3c\x0b\x4c\x28\x37\xf7\x30\x60\x80\xbb\x07\x8d\x71\xc7\xf3\xc6\x4a\x73\x1f\x83\xee\x39\x7f\x98\x64\x12\xc7\x17\xfc\x89\x6c\xf6\x6c\xc8\xb3\x57\xde\xc2\x63\x10\x8b\xf9\x3c\x3e\xe7\x91\xce\xb5\x0f\x2c\xca\xfc\xc5\x93\x59\x1b\x27\xe3\xd1\x01\x29\x3e\xa1\x8f\xb9\x71\xcb\x4c\x76\x11\x43\x8b\xc5\x69\x4e\xfd\xe8\x10\x35\x4a\x8d\x14\x7a\x5b\x95\x7f\x65\xdb\x06\xb9\xf6\x3a\x9b\xfa\x1f\xd9\x42\xb8\xf1\x8c\x5f\xa5\xd6\x94\xcd\xa6\xc9\xa6\x96\xac\x58\x0c\xe5\x0c\x15\xc6\x91\x5c\x9c\x24\x36\x85\x02\x89\xd2\x3b\x6e\x2d\x97\x47\xfd\x4c\x92\x48\x74\x54\xc2\x38\x67\x7a\x89\x85\x67\x17\x17\xf9\x23\xd7\xe4\xbb\x68\xca\x62\x76\x57\x7a\x3f\xbe\xbe\xfc\xf4\xee\x4a\x0c\x11\x2a\x8b\x6e\xcd\x75\x79\xc7\x31\x27\xd0\x23\xc4\x1d\xa0\x1f\x46\x10\xa5\x30\x7d\x63\xda\x8f\xb9\x64\x5b\x22\x5a\x7a\xac\xe3\xf1\x94\x06\x28\x99\x84\x07\x77\x3f\xa4\x1f\xd1\x8e\xf2\xfd\x46\x1a\x8b\x3a\x6a\x66\x42\xe8\x97\x95\x41\x72\x17\x10\x3b\x8d\xbb\xf2\x97\x8b\x27\x0c\x55\x60\xc9\x6d\x48\x32\x9b\xff\xff\x7a\x9c\x35\xc9\x01\xb9\xb7\xe6\x36\x9f\x5a\x9c\x2e\xfa\x1d\xa2\x8a\xbb\x4c\xef\x16\x49\x33\x05\x71\x2d\x03\x3e\x7f\x2a\xca\x3c\x09\x7a\xbd\xbe\xbd\x8d\xbd\xaa\xae\xc8\xac\xd7\x48\x6f\xaf\xae\x3e\xc0\xe1\x30\xc1\x5d\xe3\x89\xc3\x67\x71\x77\x8d\xf9\x02\xcb\xe3\x0a\x75\xa6\xe2\x79\x10\x1d\x65\xfe\x68\x9f\x1c\x72\x34\xb4\x01\x7f\x29\x44\x5a\x14\xcf\x37\xc0\x44\xc4\x64\xa9\xfa\x05\xf1\xa1\x3c\x3c\x9f\x95\x79\x23\x18\x46\x69\xf4\xef\x41\xe0\xd1\xa3\x81\x74\x69\x7b\x78\xc8\x50\xff\xc1\xff\x14\x76\xf4\x1d\xef\x3e\x5f\x86\xd3\x70\x38\xfc\x1b\x00\x00\xff\xff\xae\x4b\x71\xd6\x3c\x0b\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2876, mode: os.FileMode(420), modTime: time.Unix(1491414908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x4b\xcc\x4d\x55\xb2\x52\x50\xaa\xae\xd6\x73\x2b\xcd\x4b\x2e\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\x55\xd2\x01\x49\x97\xa5\x16\x15\x67\xe6\xe7\x81\x54\x18\xe8\x19\xe8\x19\x40\x44\x53\x52\x0b\x52\xf3\x52\x52\xf3\x92\x33\x53\x8b\x95\xac\x14\x40\x06\x81\x44\xf3\x4b\x52\xf3\xca\x40\x4a\xe3\x4c\xc0\x6a\xb9\x14\x14\x6a\xb9\x6a\x01\x01\x00\x00\xff\xff\xe6\x48\x09\x7c\x67\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 103, mode: os.FileMode(420), modTime: time.Unix(1491414915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

