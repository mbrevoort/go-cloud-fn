// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x51\x8f\xdb\x36\x0c\x7e\xf7\xaf\xe0\x5e\x2a\x7b\x4d\x9c\xdb\xd0\x76\xc5\x01\xe9\x80\x0e\x2d\x8a\xa1\xeb\x8a\xdd\x0d\x7b\x28\x8a\x42\xb1\x68\x5b\x3d\x45\x72\x29\x3a\x4e\x70\xc8\x7f\x1f\x24\x2b\x4e\x9a\x5e\x06\x14\xd8\x53\x62\x91\xfa\x48\x91\x9f\x3e\x8a\xf0\x4b\xaf\x09\x73\xa1\x1c\xa3\xdd\x88\xa2\xac\x9c\xad\x75\x93\x17\x59\x56\xf7\xb6\x62\xed\x2c\xf8\x56\xaf\x21\x57\x92\xe5\x0c\x2a\x69\xcc\x4a\x56\x77\x05\xdc\x67\x00\x06\x19\x08\x7d\xe7\xac\xc7\xf7\x72\x67\x9c\x54\xb0\x04\x21\xb2\x0c\x60\xb1\x80\x9b\x4e\x0e\x16\xb8\x45\x98\xb0\xa4\x55\xa0\xed\x67\xac\x38\xae\xa3\xdd\x40\x4d\x6e\x1d\x3f\x3a\x49\x68\x19\x3a\x72\x15\x7a\x5f\x66\x00\x95\xb3\x9e\xa1\x83\x25\x4c\x89\x56\xad\x36\xea\x53\xf2\x11\x45\x89\x5b\xac\x5e\x6b\x83\xb9\x28\x17\xf7\xf7\xe5\xeb\x14\xe8\x9d\x5c\xe3\x7e\x2f\x66\xf0\xe1\xe3\x2c\xa6\x0a\x21\xd6\xf5\x04\x8e\x76\x33\x8b\xab\x8b\x05\xbc\x95\xd4\xe0\x74\x0e\x0f\x6e\x83\x04\x9e\x95\xb6\x30\x20\x61\xfc\xa6\xde\x6a\xdb\xc4\x34\x15\xd6\xb2\x37\x1c\x3d\x1c\xac\xfa\xba\x46\x2a\x0f\x58\x37\xda\x56\x08\x03\x82\x72\x56\x30\x58\x44\x05\xec\x60\x70\x74\x07\x72\xe5\x7a\x06\x69\x77\xe0\xb8\x45\x0a\xa7\xab\x7a\x8a\x67\x0e\xc7\x43\xcf\x1e\x1c\x01\xa3\x95\x96\xfd\x0c\x1a\xbd\x41\xd0\x0c\x12\x5a\x94\x86\xdb\x1d\xac\xe5\x36\x06\x5a\xcb\xed\xcb\x18\xf7\x1a\x7e\xba\x7a\xf2\xfc\xe9\x2f\xcf\xe0\x47\xf8\xf9\x69\x06\xb0\x2f\x42\xed\xbb\x32\xa6\x5f\x7a\xe4\x57\xb6\x72\x4a\xdb\x26\x17\x3d\xd7\xf3\xe7\xa2\x48\xbd\x79\xeb\x1a\xf0\x2c\xad\x92\xa4\x00\x89\x60\x8d\xde\xcb\x06\x7d\x48\x77\x32\xb8\x9e\x0f\x70\x48\x54\x3a\x9b\x8b\xc0\x03\x31\x83\xf0\x03\xcb\x17\xa9\xb6\xa1\x51\xce\x60\x69\x5c\x13\x89\x52\x7c\x9d\x8a\xeb\xf9\xf2\xde\x73\x02\x3d\x5e\x46\x87\x92\xdd\x0d\x53\xc8\xfc\x14\x2c\xa0\x20\x91\x23\x31\x8b\x59\x4f\x28\xdc\x92\x1b\xc0\xe2\x00\xaf\x82\x39\x17\x8d\x9b\x57\xc6\xf5\x6a\x5e\x27\x06\x13\x56\xa8\x37\x18\x4f\x7b\xd8\x7f\x0e\x5d\x19\xe7\x31\x98\xb6\x9a\x7f\x73\x0a\x8f\xf8\xba\x86\x7c\x5a\x7d\x01\x57\x45\x5a\x0f\xf9\x73\x4f\x76\xba\x19\xf9\x49\x0e\x37\x21\x6e\xd8\x85\x0a\x7a\xeb\xfb\x2a\x70\xaf\xee\x8d\xd9\xc1\xa0\xb9\x85\xca\x29\x5c\x0a\x78\x3c\xc5\x2b\x66\xe7\xe5\x28\x62\x94\x7d\xf6\x60\xa4\xde\x98\x07\x37\xec\x0f\x5d\xfe\x87\x34\x63\x64\xad\xb6\x5d\xcf\x63\xe5\x63\x83\x95\xb6\x27\x44\x19\x82\x5f\xfe\xfb\xcd\x9f\xef\x4a\x1f\x8b\xae\xeb\xdd\xd8\xc8\xe2\xc4\x0b\xad\xca\x8b\x6c\x9f\x65\x8b\x05\xbc\x91\x56\x19\x84\x96\xb9\x3b\xb0\xf7\xa8\x18\x6d\x34\xbe\x09\xb6\x9c\xf0\x4b\xcc\x71\x2c\xd8\x46\xd2\xc1\xfd\xa5\x53\xbb\x90\xa6\x1f\x34\x57\x6d\x74\x2c\x1b\xe4\x5c\x54\xce\x32\x5a\x9e\xf3\xae\x43\x51\x1c\x0a\x5d\x49\x8f\x20\x64\xd7\x19\x5d\xc9\x10\x65\xf1\xd9\x3b\x2b\xae\xa7\x2e\x4c\xa0\xb0\x84\xb3\x93\x04\xe8\x95\x53\xbb\x22\x39\xaf\x08\xe5\xdd\x05\xd4\xed\x7c\x18\x86\x79\xed\x68\x3d\xef\xc9\x60\xb8\x3e\xa8\xa6\x30\x8b\x05\xdc\xb6\x08\x01\x2c\xe8\x95\x47\x82\xda\x11\x44\xa6\x4d\x2a\xe7\x41\xb9\x70\x91\x5a\xed\x67\xe0\x1d\x7c\xee\x83\x8a\x19\xb9\x03\x69\x9c\x6d\x8e\x50\x91\x04\x9a\x83\x13\x51\xb8\xde\xf6\x07\xf8\x43\xee\x56\x51\x41\x7c\xeb\x7a\xa3\x46\x0d\xa4\xbe\x62\xf0\x6e\x8d\x70\xa7\xad\x02\x57\x07\x21\xeb\x90\x8e\x50\x21\xe1\x43\x11\x62\x7a\xbf\x06\x2d\xb1\x8e\xcb\xa0\xd2\xc2\xc3\x1d\x62\x17\xd4\x24\x64\x05\x83\xdc\xc5\xbc\xad\x1b\x66\x20\xfd\xe9\xe1\xb4\x07\xed\xa1\x75\xc3\x37\x87\x5a\x61\x2b\x37\xe8\xcb\x63\xc5\x83\xc0\x9c\xf5\x6b\xf6\x40\x8f\x8a\xff\xbb\x47\xae\x62\xe4\xb9\x67\x42\xb9\xbe\xc0\x80\x03\xdc\x05\x34\xc6\x2d\x2f\x3a\x23\xf5\x25\x06\x5d\xd8\xbf\xcf\x12\x89\xc3\x2d\xfe\x9b\x4c\xf2\xec\xc8\xb1\xab\x9c\x81\xc7\x20\xae\x17\x8b\x70\xa5\x27\x3a\xb7\xce\xb3\x28\xd2\x8a\x23\xdd\x68\x2b\xc3\xd6\x03\x52\xb8\x42\x7f\xa5\xc6\x2d\x13\xd9\x45\x08\x2d\xae\x4f\x73\x1a\xc7\x95\x68\x51\x2a\x24\x3f\xda\xca\xf4\x95\x6c\x6b\xe4\xd6\xa9\x64\x1a\x3f\x92\x85\x70\xed\x18\x3f\x49\xa5\x28\x99\x75\x97\x4c\x3d\x19\x71\x7d\x38\xce\xe1\x84\x41\x30\xf3\x93\xc4\x66\x90\x23\x51\xbc\xc7\xbd\xe1\xe2\x4c\x16\x89\x8e\x6a\x18\xc6\x44\x15\x95\x13\x9e\x5e\x5d\xa5\xc5\x51\x9c\x91\x28\x89\x59\xfc\x09\x8f\x87\x71\x12\x40\x10\xb2\x51\xc5\x69\x37\x21\x25\x5b\xa4\x49\xbc\x6a\x79\x8a\x3e\x82\x40\x25\xa3\x6c\xe0\xf6\xab\xe0\x01\xed\x28\xc0\xaf\xa5\x36\xe3\x04\x8e\x08\x87\x41\x30\x0a\xe6\x35\x8c\xd2\x5b\x7c\x77\xea\x84\xbe\xf4\x2c\xb9\xf7\x51\x24\xd3\xff\x4f\x61\x73\x71\x74\x40\x1e\xad\xa9\x49\xa7\x16\xab\xf2\x71\x80\x97\xe1\xf5\x33\xba\x85\x96\xcf\x40\xac\xa4\xc7\x67\x4f\x44\x91\x74\x7c\x54\xdb\xfb\xfb\x50\xe9\xf2\x96\x74\xd3\x20\xbd\xb9\xbd\x7d\x0f\xfb\x7d\x86\xdb\xce\x11\xfb\x0f\xe2\xdb\x87\xcf\x47\x58\x1e\x1f\x5d\x67\x1a\x9c\xc6\xc8\x51\xa4\x8f\xf6\x6c\x9f\xa2\xa1\xf1\xf8\x5d\x21\x70\x83\x96\xcf\xdf\x87\x91\x46\xd1\x52\x8e\xcf\xc7\x53\x16\xdd\x30\xfd\x17\x91\x2e\x72\x66\xdc\xfd\x10\x33\x02\xe2\x04\x96\xdc\x1e\x3d\x4a\x1b\xca\x38\xf6\x2f\xe1\x47\xf1\xbb\x3c\xc9\xbf\x82\x38\x1d\xc9\x93\xef\xd4\xae\x54\x3f\xab\x60\xbf\xff\x37\x00\x00\xff\xff\xae\x7e\x88\x43\x5f\x0b\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2911, mode: os.FileMode(420), modTime: time.Unix(1494014429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x4b\xcc\x4d\x55\xb2\x52\x50\xaa\xae\xd6\x73\x2b\xcd\x4b\x2e\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\x55\xd2\x01\x49\x97\xa5\x16\x15\x67\xe6\xe7\x81\x54\x18\xe8\x19\xe8\x19\x40\x44\x53\x52\x0b\x52\xf3\x52\x52\xf3\x92\x33\x53\x8b\x95\xac\x14\x40\x06\x81\x44\xf3\x4b\x52\xf3\xca\x40\x4a\xe3\x4c\xc0\x6a\xb9\x14\x14\x6a\xb9\x6a\x01\x01\x00\x00\xff\xff\xe6\x48\x09\x7c\x67\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 103, mode: os.FileMode(420), modTime: time.Unix(1493816950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

