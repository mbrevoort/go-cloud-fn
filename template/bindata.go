// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5f\x8f\xdb\xc6\x11\x7f\xe7\xa7\x98\x00\x41\x96\xac\x75\xa4\x13\xc4\x69\x70\x80\xd2\x22\x85\x0d\xa7\x48\x53\x37\xe7\xa2\x0f\x81\xe1\xac\xb8\x23\x72\x7d\xab\x5d\x66\xff\x48\x27\x1c\xf8\xdd\x8b\xd9\x5d\x52\x94\xac\x2b\x6c\xa0\x2f\x12\xb9\x33\x3b\xff\xe7\x37\xc3\x3d\xb7\x30\x84\x8d\x0b\x1b\x58\x83\xc5\x3f\x82\xb4\x58\xb2\xbf\x76\xc6\x74\x0a\x6f\x5a\x65\x82\x68\x12\x9d\x55\x65\x55\xcc\x1c\xc2\x78\xd4\x7b\x56\xd5\xad\xd1\x5b\xd9\x95\x55\x51\x6c\x83\x6e\xbd\x34\x1a\x5c\x2f\x77\x50\x0a\xee\xf9\x0a\x5a\xae\xd4\x86\xb7\xf7\x15\x3c\x16\x00\x0a\x3d\x58\x74\x83\xd1\x0e\xdf\xf0\xa3\x32\x5c\xc0\x1a\x18\x2b\x0a\x80\xa6\x81\xbb\x81\x1f\x34\xf8\x1e\x61\x96\xc5\xb5\x00\xa9\x3f\x60\xeb\xe3\x39\xea\x3d\x6c\xad\xd9\xc5\x97\x81\x5b\xd4\x1e\x06\x6b\x5a\x74\xae\x2e\x00\x5a\xa3\x9d\x87\x61\xe9\x4a\xdb\x4b\x25\xde\x67\x1e\x56\xd5\xf8\x80\xed\x2b\xa9\xb0\x64\x75\xf3\xf8\x58\xbf\xca\x8a\x7e\xe1\x3b\x1c\x47\xb6\x82\xdf\xde\xad\xa2\xa9\x40\xba\x6e\x67\xe1\xa8\xf7\xab\x78\xda\x34\xf0\x33\xb7\x1d\xce\x7e\x38\x30\x7b\xb4\xe0\xbc\x90\x1a\x0e\x68\x31\xbe\xdb\xa0\xa5\xee\xa2\x99\x02\xb7\x3c\x28\x1f\x39\x0c\x6c\xc2\x76\x8b\xb6\x9e\x64\xdd\x49\xdd\x22\x1c\x10\x84\xd1\xcc\x83\x46\x14\xe0\x0d\x1c\x8c\xbd\x07\xbe\x31\xc1\x03\xd7\x47\x30\xbe\x47\x4b\xde\xb5\xc1\x46\x9f\xc9\x3d\x74\xde\x81\xb1\xe0\x51\x73\xed\xdd\x0a\x3a\xb9\x47\x90\x1e\x38\xf4\xc8\x95\xef\x8f\xb0\xe3\x0f\x51\xd1\x8e\x3f\xfc\x18\xf5\xde\xc2\xd7\xcf\xbf\xfd\xfe\xc5\x9f\xbf\x83\x3f\xc1\x37\x2f\x0a\x80\xb1\xa2\xd8\x0f\x75\x34\xbf\x76\xe8\x5f\xea\xd6\x08\xa9\xbb\x92\x05\xbf\xbd\xf9\x9e\x55\x39\x37\x3f\x9b\x0e\x9c\xe7\x5a\x70\x2b\x00\xad\x85\x1d\x3a\xc7\x3b\x74\x64\xee\x4c\x30\xc1\x4f\xe2\xd0\xda\xda\xe8\x92\x51\x1d\xb0\x15\xd0\x1f\xac\x7f\xc8\xb1\xa5\x44\x19\x85\xb5\x32\x5d\x2c\x94\xea\xdc\x14\x13\xfc\xd3\x77\x2f\x0b\xe8\xd9\x3a\x32\xd4\xde\xdc\x79\x4b\x96\x2f\x85\x91\x14\xb4\xd6\x58\xb6\x8a\x56\xcf\x52\x7c\x6f\xcd\x01\x34\x1e\xe0\x25\x91\x4b\xd6\x99\x54\xee\x37\xdb\x5c\xc1\x16\x5b\x94\x7b\x8c\xde\x4e\xf7\x2f\x45\xb7\xca\x38\x24\xd2\x83\xf4\x7f\x33\x02\x4f\xf2\xe5\x16\xca\xf9\xf4\x07\x78\x5e\xe5\x73\xb2\xdf\x07\xab\xe7\xce\x28\x17\x36\xdc\x91\x5e\xba\x85\x02\x82\x76\xa1\xa5\xda\xdb\x06\xa5\x8e\x70\x90\xbe\x87\xd6\x08\x5c\x33\x78\x36\xeb\xab\x56\x97\xe1\xa8\xa2\x96\xb1\xb8\xaa\x29\x28\x75\xf5\xc2\x38\x65\xf9\x3f\x56\x7a\x8c\x55\x2b\xf5\x10\x7c\x8a\x7c\x4c\xb0\x90\x7a\x51\x28\x07\xe2\x2b\xff\x7e\xf7\xcf\x5f\x6a\x17\x83\x2e\xb7\xc7\x94\xc8\x6a\xc1\x85\x5a\x94\x55\x31\x16\x45\xd3\xc0\x6b\xae\x85\x42\xe8\xbd\x1f\xa6\xea\x3d\x21\x46\x1f\x89\xaf\x89\x56\x5a\xfc\x23\xda\x98\x02\x46\xf8\x94\xd9\x7f\x34\xe2\x48\x66\xba\x83\xf4\x6d\x1f\x19\xeb\x0e\x7d\xc9\x5a\xa3\x3d\x6a\x7f\xe3\x8f\x03\xb2\x6a\x0a\x74\xcb\x1d\x02\xe3\xc3\xa0\x64\xcb\x49\x4b\xf3\xc1\x19\xcd\x6e\xe7\x2c\xcc\x42\x61\x0d\x17\x9e\x90\xe8\x8d\x11\xc7\x2a\x33\x6f\x2c\xf2\xfb\x27\xa4\x3e\xdc\x1c\x0e\x87\x9b\xad\xb1\xbb\x9b\x60\x15\x52\xfb\xa0\x98\xd5\x34\x0d\xbc\xed\x11\x48\x18\xe1\x95\x43\x0b\x5b\x63\x21\x56\xda\x8c\x72\x0e\x84\xa1\x46\xea\xa5\x5b\x81\x33\xf0\x21\x10\x8a\x29\x7e\x04\xae\x8c\xee\x4e\xa2\x62\x11\x48\x4f\x4c\xd6\x52\x7b\xeb\x2f\xe0\x1f\xfc\xb8\x89\x08\xe2\x7a\x13\x94\x48\x18\x68\x43\xeb\xc1\x99\x1d\xc2\xbd\xd4\x02\xcc\x96\x80\x6c\x40\x7b\x12\x45\x06\x4f\x41\x88\xe6\xfd\x85\xb0\x44\x1b\x5f\x13\x4a\x33\x07\xf7\x88\x03\xa1\x09\x59\x05\x07\x7e\x8c\x76\x6b\x73\x58\x01\x77\x4b\xe7\xa4\x03\xe9\xa0\x37\x87\x8f\x9c\xda\x60\xcf\xf7\xe8\xea\x53\xc4\x09\x60\x2e\xf2\xb5\xba\x92\xa3\xea\xff\x9d\x23\xd3\x7a\xf4\x37\xce\x5b\xe4\xbb\x27\x2a\x60\x12\xf7\x84\x34\x8f\x0f\xbe\x19\x14\x97\x4f\x55\xd0\x13\xf7\xc7\x22\x17\x31\x75\xf1\xbf\xad\xca\x9c\x83\x35\xde\xb4\x46\xc1\x33\x60\xb7\x4d\x43\x2d\x3d\x97\x73\x6f\x9c\x67\x55\x3e\x31\x56\x76\x52\x73\xba\x3a\x49\xa2\x16\xfa\x35\x27\x6e\x9d\x8b\x9d\x91\x6a\x76\xbb\xb4\x29\x8d\x2b\xd6\x23\x17\x68\x5d\xa2\xd5\xf9\x2d\xd3\x76\xe8\x7b\x23\x32\x29\xbd\x64\x8a\xc5\x9d\xf1\xf8\x9e\x0b\x61\x33\x59\x0e\x99\x14\xac\x62\xb7\x93\x3b\x93\x87\x04\x98\xe5\xc2\xb0\x15\x94\x68\x6d\xec\xe3\xa0\x7c\x75\x01\x8b\xd6\x9e\xd0\x90\xc6\x44\x1b\x91\x13\x5e\x3c\x7f\x9e\x0f\x13\x38\xa3\xb5\x19\xcc\xe2\x1f\x2d\x0f\x69\x12\x00\x01\x59\x42\x71\x7b\x9c\x25\x65\x5a\x2c\x93\xd8\x6a\x65\xd6\x9e\x84\x40\xcb\x23\x6c\xe0\xc3\x99\x72\x92\x76\x02\xe0\x57\x5c\xaa\x34\x81\xa3\x84\x69\x10\x24\xc0\xbc\x85\x04\xbd\xd5\x67\x9b\x6e\xd1\xd5\xce\x73\x1f\x5c\x04\xc9\xfc\xfc\x9e\x2e\x57\x27\x06\xf4\x89\x9a\x93\xb4\xa4\x68\x51\xa6\x01\x5e\xd3\xf6\x93\xd8\x28\xe5\x2b\x60\x1b\xee\xf0\xbb\x6f\x59\x95\x71\x7c\x5c\x2c\x62\xde\x0c\xb2\xa5\xcd\xe6\x95\x35\xbb\x5f\xd1\x99\x60\x5b\x24\xe0\x4c\x4f\xa7\x9d\x6c\xe0\xd6\xbb\x58\x9a\x89\x52\xbb\x41\x49\x5f\xb2\x28\xc0\x35\xb1\x21\x29\x73\x91\xaf\x56\xa8\x3b\xdf\xc3\x7a\x0d\xdf\x54\xf3\x4c\x8e\x93\x26\xd2\x7f\xfb\xfa\x5d\x91\x26\x50\x3e\x8d\xd9\x5a\xda\x65\xd1\xdb\xe3\x9b\xb0\xb9\x0b\x1b\x28\x71\x8f\xda\xaf\x60\x2a\xf4\x98\x88\x6b\x7b\xe3\xec\x0c\xac\xaf\x3b\x96\x24\xd5\xb3\x77\xf9\x1e\x21\xca\x9d\xa7\x3c\x2f\x23\x98\x78\x63\x1c\xd3\xa2\x3a\xc7\xf1\x7c\x8f\x58\x14\xdd\xa2\xb0\xb2\xcc\xaa\x28\x8a\xf3\x5d\xe6\xf7\x7f\x05\x0c\x48\x9b\x5f\xf4\x91\x80\x37\xfb\x19\x15\xc2\x97\x8f\x49\x71\xfc\xfd\x49\x8c\x54\x69\xd1\x19\xf8\xf2\x71\x76\x6a\xfc\x3d\x8e\xe3\xd9\x69\x58\xe7\x15\xbd\x8e\xaf\xe5\xcc\x38\xa5\xe5\x8b\x78\x52\x5d\xd9\xad\xd8\x32\xd4\xdb\x54\xdc\x1b\x6c\x79\x70\x98\x65\x07\x7d\xaf\xcd\x61\xc2\xdc\xcb\x8d\xe1\x2c\x2b\xd5\xd4\xed\xf1\x66\x3d\x84\x8d\x92\xae\x2f\x1f\x53\x80\xc6\x15\x94\x43\xd8\xbc\xa4\xb6\xcf\xbb\xe1\x4f\xc2\x5d\xb4\x7e\x62\x38\x35\xe0\x27\xda\xca\x56\x90\x6f\xe6\x5e\x46\xe5\xf0\xaa\x90\x94\x00\x11\x7b\x7a\x0a\xf9\xc9\x9a\x31\x0e\xb1\xcf\x4c\xc5\xa2\x8f\x9b\x06\x9c\x97\x4a\x4d\x71\xa2\x45\x69\x0a\x51\x5a\x13\xa3\x82\xb3\x2f\x18\xfa\xe0\x08\xf4\x94\xa7\xc9\x93\x91\x9d\x36\xa5\xc7\x47\x0a\x55\xfd\xd6\xca\xae\x43\xfb\xfa\xed\xdb\x37\x30\x8e\x05\x3e\x0c\x86\x9a\x8b\x7d\xfc\xd1\xf2\x0e\xd6\x27\x75\x17\xfb\x53\x36\xf4\xb4\x60\x9d\xe8\xc5\x98\xb5\xc5\x60\x7e\x8e\x8a\xdc\xb2\xe7\x3d\x1a\x47\xc0\xa9\xad\xce\x27\x00\x35\xcb\xff\x18\x02\xd9\xca\x45\x01\x4c\x3a\xa2\x8c\x59\xd1\xe5\x38\x48\xc2\xaf\x81\x7e\xec\xce\x49\x57\x66\xfb\xea\xab\x7c\xa1\x8e\xa9\xfa\x14\xf5\xa7\xd1\x70\x76\xf3\x63\x93\xce\x72\x9b\xf6\x6c\x96\xf7\x77\x36\x67\x37\x87\x5b\x0b\x18\xc7\xff\x06\x00\x00\xff\xff\x70\xd8\xd9\xdf\x79\x0f\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 3961, mode: os.FileMode(420), modTime: time.Unix(1494447347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\xcc\x5a\x63\x0a\xae\xba\x72\xe5\xd2\x23\x08\x6d\xf2\x28\x81\x76\xa6\x98\xa6\x08\x21\x77\x97\xa1\xe0\xf6\xbd\x8f\xbf\x76\x44\x2c\xe3\x0a\x1e\x88\x6b\x75\xcf\x22\x61\x4f\x2a\xaf\x71\x45\x6b\x7c\xb1\xfb\xc0\x27\x27\x15\x13\xde\x79\xe7\xcf\x35\x62\x83\x44\x48\x48\xc8\x3c\x90\x85\x6c\xd5\x1d\x72\x18\x7d\xdf\xff\x96\x88\x1f\xb3\xea\xbc\xe0\x1a\x16\x2d\xf1\xb6\x95\x29\x97\xe9\x0c\xf6\xbd\xfb\x72\x47\xd4\xba\xf6\x0b\x00\x00\xff\xff\xc2\x5c\xfd\x85\x8d\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 141, mode: os.FileMode(420), modTime: time.Unix(1494442094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

