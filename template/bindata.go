// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5f\x8f\xdb\x36\x12\x7f\xd7\xa7\x98\x02\x45\x29\x5d\x6c\x29\x2d\x9a\x5e\xb1\x80\x7b\x97\x04\x1b\x24\x77\x69\xbb\x17\x6f\x71\x0f\x45\x90\xd2\xe2\x58\x62\x96\x26\x55\xfe\xb1\xd7\x58\xf8\xbb\x1f\x86\xa2\x64\xd9\xf1\xde\x25\xc0\xbd\xec\x5a\x9c\xe1\xfc\x9f\xdf\x0c\xb7\xdc\x42\x17\x56\x2e\xac\x60\x01\x16\xff\x0c\xd2\x62\xce\xfe\xde\x18\xd3\x28\x9c\xd7\xca\x04\x51\xf5\x74\x56\xe4\x45\x36\x72\x08\xe3\x51\x6f\x59\x51\xd6\x46\xaf\x65\x93\x17\x59\xb6\x0e\xba\xf6\xd2\x68\x70\xad\xdc\x40\x2e\xb8\xe7\x33\xa8\xb9\x52\x2b\x5e\xdf\x15\xf0\x90\x01\x28\xf4\x60\xd1\x75\x46\x3b\xbc\xe1\x7b\x65\xb8\x80\x05\x30\x96\x65\x00\x55\x05\xcb\x8e\xef\x34\xf8\x16\x61\x94\xc5\xb5\x00\xa9\x3f\x62\xed\xe3\x39\xea\x2d\xac\xad\xd9\xc4\x8f\x8e\x5b\xd4\x1e\x3a\x6b\x6a\x74\xae\xcc\x00\x6a\xa3\x9d\x87\x6e\xea\x4a\xdd\x4a\x25\x3e\x24\x1e\x56\x94\x78\x8f\xf5\x2b\xa9\x30\x67\x65\xf5\xf0\x50\xbe\x4a\x8a\x7e\xe1\x1b\x3c\x1c\xd8\x0c\x7e\x7f\x3f\x8b\xa6\x02\xe9\xba\x1a\x85\xa3\xde\xc6\xc3\xaa\x82\xb7\xdc\x36\x38\xba\xe1\xc0\x6c\xd1\x82\xf3\x42\x6a\xd8\xa1\xc5\xf8\x6d\x83\x96\xba\x89\x56\x0a\x5c\xf3\xa0\x7c\xe4\x30\xb0\x0a\xeb\x35\xda\x72\x90\xb5\x94\xba\x46\xd8\x21\x08\xa3\x99\x07\x8d\x28\xc0\x1b\xd8\x19\x7b\x07\x7c\x65\x82\x07\xae\xf7\x60\x7c\x8b\x96\x9c\xab\x83\x8d\x2e\x93\x77\xe8\xbc\x03\x63\xc1\xa3\xe6\xda\xbb\x19\x34\x72\x8b\x20\x3d\x70\x68\x91\x2b\xdf\xee\x61\xc3\xef\x07\x45\x1b\x7e\xff\x22\xaa\xbe\x82\x6f\x9f\x7e\xff\xe3\xb3\xbf\xfe\x00\x7f\x81\xef\x9e\x65\x00\x87\x82\xa2\xdf\x95\xd1\x83\xd2\xa1\xbf\xd6\xb5\x11\x52\x37\x39\x0b\x7e\x3d\xff\x91\x15\x29\x3b\x6f\x4d\x03\xce\x73\x2d\xb8\x15\x80\xd6\xc2\x06\x9d\xe3\x0d\x3a\xb2\x78\x24\x98\xe0\x07\x71\x68\x6d\x69\x74\xce\xa8\x12\xd8\x0c\xe8\x1f\x2c\x7e\x4a\xd1\xa5\x54\x19\x85\xa5\x32\x4d\x2c\x95\xe2\xd4\x14\x13\xfc\xe3\x77\xcf\x4b\xe8\xc9\x22\x32\x94\xde\x2c\xbd\x25\xcb\xa7\xc2\x48\x0a\x5a\x6b\x2c\x9b\x45\xab\x47\x29\xbe\xb5\x66\x07\x1a\x77\x70\x4d\xe4\x9c\x35\xa6\x2f\xf8\xf9\x3a\xd5\xb0\xc5\x1a\xe5\x16\xa3\xb7\xc3\xfd\x73\xd1\xb5\x32\x0e\x89\x74\x2f\xfd\x4b\x23\xf0\x28\x5f\xae\x21\x1f\x4f\x7f\x82\xa7\x45\x3a\x27\xfb\x7d\xb0\x7a\xec\x8d\x7c\x62\xc3\x92\xf4\xd2\x2d\x14\x10\xb4\x0b\x35\x55\xdf\x3a\x28\xb5\x87\x9d\xf4\x2d\xd4\x46\xe0\x82\xc1\x93\x51\x5f\x31\x3b\x0f\x47\x11\xb5\x1c\xb2\x8b\x9a\x82\x52\x17\x2f\x1c\x86\x2c\xff\xdb\x4a\x8f\xb1\x70\xa5\xee\x82\xef\x23\x1f\x13\x2c\xa4\x9e\x14\xca\x8e\xf8\xf2\x7f\x2c\x7f\xfd\xa5\x74\x31\xe8\x72\xbd\xef\x13\x59\x4c\xb8\x50\x8b\xbc\xc8\x0e\x59\x56\x55\xf0\x9a\x6b\xa1\x10\x5a\xef\xbb\xa1\x80\x8f\x98\xd1\x46\xe2\x6b\xa2\xe5\x16\xff\x8c\x36\xf6\x01\x23\x84\x4a\xec\x2f\x8c\xd8\x93\x99\x6e\x27\x7d\xdd\x46\xc6\xb2\x41\x9f\xb3\xda\x68\x8f\xda\xcf\xfd\xbe\x43\x56\x0c\x81\xae\xb9\x43\x60\xbc\xeb\x94\xac\x39\x69\xa9\x3e\x3a\xa3\xd9\xd5\x98\x85\x51\x28\x2c\xe0\xcc\x13\x12\xbd\x32\x62\x5f\x24\xe6\x95\x45\x7e\xf7\x88\xd4\xfb\xf9\x6e\xb7\x9b\xaf\x8d\xdd\xcc\x83\x55\x48\xed\x83\x62\x54\x53\x55\x70\xdb\x22\x90\x30\x42\x2c\x87\x16\xd6\xc6\x42\xac\xb4\x11\xe7\x1c\x08\x43\x8d\xd4\x4a\x37\x03\x67\xe0\x63\x20\x1c\x53\x7c\x0f\x5c\x19\xdd\x1c\x45\xc5\x22\x90\x9e\x98\xac\xa5\x0e\xd7\x5f\xc1\xcf\x7c\xbf\x8a\x20\xe2\x5a\x13\x94\xe8\x51\xd0\x86\xda\x83\x33\x1b\x84\x3b\xa9\x05\x98\x35\x41\x59\x87\xf6\x28\x8a\x0c\x1e\x82\x10\xcd\xfb\x1b\xc1\x89\x36\xbe\x24\x9c\x66\x0e\xee\x10\x3b\x02\x14\xb2\x0a\x76\x7c\x1f\xed\xd6\x66\x37\x03\xee\xa6\xce\x49\x07\xd2\x41\x6b\x76\x9f\x38\xb5\xc2\x96\x6f\xd1\x95\xc7\x88\x13\xc0\x9c\xe5\x6b\x76\x21\x47\xc5\xff\x3b\x47\xa6\xf6\xe8\xe7\xce\x5b\xe4\x9b\x47\x2a\x60\x10\xf7\x88\x34\x8f\xf7\xbe\xea\x14\x97\x8f\x55\xd0\x23\xf7\x0f\x59\x2a\x62\xea\xe2\xdf\xac\x4a\x9c\x9d\x35\xde\xd4\x46\xc1\x13\x60\x57\x55\x45\x2d\x3d\x96\x73\x6b\x9c\x67\x45\x3a\x31\x56\x36\x52\x73\xba\x3a\x48\xa2\x16\x7a\x97\x12\xb7\x48\xc5\xce\x48\x35\xbb\x9a\xda\x34\xeb\x09\x2d\x72\x81\xd6\xf5\xb4\x32\x7d\x25\xda\x06\x7d\x6b\x44\x22\xf5\x1f\x89\x62\x71\x63\x3c\x7e\xe0\x42\xd8\x44\x96\x5d\x22\x05\xab\xd8\xd5\xe0\xce\xe0\x21\x01\x66\x3e\x31\x6c\x06\x39\x5a\x1b\xfb\x38\x28\x5f\x9c\xc1\xa2\xb5\x47\x34\xa4\x31\x51\x47\xe4\x84\x67\x4f\x9f\xa6\xc3\x1e\x9c\xd1\xda\x04\x66\xf1\x1f\xad\x0f\xfd\x24\x00\x02\xb2\x1e\xc5\xed\x7e\x94\x94\x68\xb1\x4c\x62\xab\xe5\x49\x7b\x2f\x04\x6a\x1e\x61\x03\xef\x4f\x94\x93\xb4\x23\x00\xbf\xe2\x52\xf5\x43\x38\x4a\x18\x06\x41\x0f\x98\x57\xd0\x43\x6f\xf1\xc5\xa6\x5b\x74\xa5\xf3\xdc\x07\x17\x41\x32\xfd\xfe\x40\x97\x8b\x23\x03\xfa\x9e\x9a\x92\x34\xa5\x68\x91\xf7\x03\xbc\xa4\xfd\xa7\x67\xa3\x94\xcf\x80\xad\xb8\xc3\x1f\xbe\x67\x45\xc2\xf1\xc3\x64\x15\xf3\xa6\x93\x35\xed\x36\xaf\xac\xd9\xbc\x43\x67\x82\xad\x91\x80\xb3\xff\x75\xdc\xca\x3a\x6e\xbd\x8b\xa5\xd9\x53\x4a\xd7\x29\xe9\x73\x16\x05\xb8\x2a\x36\x24\x65\x2e\xf2\x95\x0a\x75\xe3\x5b\x58\x2c\xe0\xbb\x62\x9c\xc9\x71\xd2\x44\xfa\xef\xdf\xbe\xcf\xfa\x09\x94\x4e\x63\xb6\xa6\x76\x59\xf4\x76\x7f\x13\x56\xcb\xb0\x82\x1c\xb7\xa8\xfd\x0c\x86\x42\x8f\x89\xb8\xb4\x39\x8e\xce\xc0\xe2\xb2\x63\xbd\xa4\x72\xf4\x2e\xdd\x23\x44\x59\x7a\xca\xf3\x34\x82\x3d\x6f\x8c\x63\xbf\xaa\x8e\x71\x3c\xdd\x23\x26\x45\x37\x29\xac\x24\xb3\xc8\xb2\xec\x74\x97\xf9\xe3\x5f\x01\x03\xd2\xf2\x17\x7d\x24\xe0\x4d\x7e\x46\x85\xf0\xf5\x43\xaf\x38\xfe\x7d\x23\x0e\x54\x69\xd1\x19\xf8\xfa\x61\x74\xea\xf0\x47\x1c\xc7\xa3\xd3\xb0\x48\x4b\x7a\x19\x3f\xf3\x91\x71\x48\xcb\x57\xf1\xa4\xb8\xb0\x5b\xb1\x69\xa8\xd7\x7d\x71\xaf\xb0\xe6\xc1\x61\x92\x1d\xf4\x9d\x36\xbb\x01\x73\xcf\x37\x86\x93\xac\x14\x43\xb7\xc7\x9b\x65\x17\x56\x4a\xba\x36\xad\xfa\x79\x17\x56\xd7\xd4\xf2\x69\x2f\x7c\x23\xdc\x59\xdb\xf7\x0c\xc7\xe6\xfb\x4c\x3b\xd9\x0c\xd2\xcd\xd4\xc7\xa8\x1c\x5e\x14\xd2\x07\x5f\xc4\x7e\x1e\xc2\x7d\xb4\xe6\x10\x07\xd8\x17\xa6\x61\xd2\xc3\x55\x05\xce\x4b\xa5\x86\x18\xd1\x92\x34\x84\xa7\x5f\x11\xa3\x82\x93\xf7\x0b\x3d\x37\x02\xfd\x4a\x93\xe4\xd1\xa8\x0e\x5b\xd2\xc3\x03\x85\xaa\xbc\xb5\xb2\x69\xd0\xbe\xbe\xbd\xbd\x81\xc3\x21\xc3\xfb\xce\x50\x63\xb1\x4f\x9f\x2c\xef\x61\x71\x54\x77\xb6\x3b\x25\x43\x8f\xcb\xd5\x91\x9e\x1d\x92\xb6\x18\xcc\x2f\x51\x91\xda\xf5\xb4\x3f\x4f\x52\x79\xf3\xee\x7a\xbe\x7c\xfd\xe6\x67\x4a\x5c\x7a\x3f\x6d\x70\x63\xec\xfe\x37\xca\x44\x1e\x81\x2a\xce\x8b\x63\x0f\x9e\x8e\x0b\xea\xac\xcb\x4f\x05\x76\xf3\xeb\xf2\xf6\x7f\x0a\xbf\x30\x65\x52\x28\x26\x55\x36\x38\x12\xf5\x8e\xde\x4c\x13\xfe\x89\x53\x37\xcf\xdf\x2d\xaf\x1f\x57\x3c\x0e\xa9\xde\x8b\x4b\xa3\x28\x62\xc6\x60\x60\x62\xfb\xe6\x9b\x74\xa1\x8c\x45\xf4\x39\x36\x1f\x07\xd6\xc9\xcd\xcf\xf5\xe3\xe5\xf3\xb7\x6f\x5f\x3c\x7f\xf9\xcf\xff\x1e\xc3\xb3\x57\x03\x4b\xaf\x91\x04\x14\x9f\x66\xe5\x73\xa4\x1e\x26\x85\xa7\x05\xd5\x5d\xf6\x9f\x00\x00\x00\xff\xff\x25\x3c\x6c\xc4\x83\x10\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 4227, mode: os.FileMode(420), modTime: time.Unix(1497584460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\xcc\x5a\x63\x0a\xae\xba\x72\xe5\xd2\x23\x08\x6d\xf2\x28\x81\x76\xa6\x98\xa6\x08\x21\x77\x97\xa1\xe0\xf6\xbd\x8f\xbf\x76\x44\x2c\xe3\x0a\x1e\x88\x6b\x75\xcf\x22\x61\x4f\x2a\xaf\x71\x45\x6b\x7c\xb1\xfb\xc0\x27\x27\x15\x13\xde\x79\xe7\xcf\x35\x62\x83\x44\x48\x48\xc8\x3c\x90\x85\x6c\xd5\x1d\x72\x18\x7d\xdf\xff\x96\x88\x1f\xb3\xea\xbc\xe0\x1a\x16\x2d\xf1\xb6\x95\x29\x97\xe9\x0c\xf6\xbd\xfb\x72\x47\xd4\xba\xf6\x0b\x00\x00\xff\xff\xc2\x5c\xfd\x85\x8d\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 141, mode: os.FileMode(420), modTime: time.Unix(1494442094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

