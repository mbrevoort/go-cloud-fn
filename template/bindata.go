// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x51\x8f\xdb\x36\x12\x7e\xd7\xaf\x98\x7b\x09\xa5\x8b\x2d\xef\x1d\x92\x5c\x60\xc0\x39\x20\x45\x82\xa0\x48\xd3\xa0\xbb\x45\x1f\x82\x20\xa0\xc5\x91\xc4\x2c\x4d\x2a\xc3\x91\x65\x63\xe1\xff\x5e\x90\xa2\x65\xaf\xb3\x5b\x34\x40\x9f\x6c\x71\x86\xdf\x0c\x67\x3e\x7e\x43\xc2\x6f\xbd\x26\xcc\x85\x72\x8c\x76\x2b\x8a\xb2\x72\xb6\xd6\x4d\x5e\x64\x59\xdd\xdb\x8a\xb5\xb3\xe0\x5b\xbd\x81\x5c\x49\x96\x33\xa8\xa4\x31\x6b\x59\xdd\x16\x70\x97\x01\x18\x64\x20\xf4\x9d\xb3\x1e\x3f\xca\xbd\x71\x52\xc1\x0a\x84\xc8\x32\x80\xc5\x02\xae\x3b\x39\x58\xe0\x16\x61\xc2\x92\x56\x81\xb6\x5f\xb1\xe2\xb8\x8e\x76\x0b\x35\xb9\x4d\xfc\xe8\x24\xa1\x65\xe8\xc8\x55\xe8\x7d\x99\x01\x54\xce\x7a\x86\x0e\x56\x30\x25\x5a\xb5\xda\xa8\x2f\xc9\x47\x14\x25\xee\xb0\x7a\xab\x0d\xe6\xa2\x5c\xdc\xdd\x95\x6f\x53\xa0\x0f\x72\x83\x87\x83\x98\xc1\xa7\xcf\xb3\x98\x2a\x84\x58\xcb\x09\x1c\xed\x76\x16\x57\x17\x0b\x78\x2f\xa9\xc1\xe9\x1c\x1e\xdc\x16\x09\x3c\x2b\x6d\x61\x40\xc2\xf8\x4d\xbd\xd5\xb6\x89\x69\x2a\xac\x65\x6f\x38\x7a\x38\x58\xf7\x75\x8d\x54\x1e\xb1\xae\xb5\xad\x10\x06\x04\xe5\xac\x60\xb0\x88\x0a\xd8\xc1\xe0\xe8\x16\xe4\xda\xf5\x0c\xd2\xee\xc1\x71\x8b\x14\x4e\x57\xf5\x14\xcf\x1c\x8e\x87\x9e\x3d\x38\x02\x46\x2b\x2d\xfb\x19\x34\x7a\x8b\xa0\x19\x24\xb4\x28\x0d\xb7\x7b\xd8\xc8\x5d\x0c\xb4\x91\xbb\xd7\x31\xee\x12\xfe\x73\xf5\xec\xe5\xf3\xff\xbd\x80\x7f\xc3\x7f\x9f\x67\x00\x87\x22\xd4\xbe\x2b\x63\xfa\xa5\x47\x7e\x63\x2b\xa7\xb4\x6d\x72\xd1\x73\x3d\x7f\x29\x8a\xd4\x9b\xf7\xae\x01\xcf\xd2\x2a\x49\x0a\x90\x08\x36\xe8\xbd\x6c\xd0\x87\x74\x27\x83\xeb\xf9\x08\x87\x44\xa5\xb3\xb9\x08\x3c\x10\x33\x08\x3f\xb0\x7a\x95\x6a\x1b\x1a\xe5\x0c\x96\xc6\x35\x91\x28\xc5\xfd\x54\x5c\xcf\x8f\xef\xbd\x24\xd0\xd3\x55\x74\x28\xd9\x5d\x33\x85\xcc\xcf\xc1\x02\x0a\x12\x39\x12\xb3\x98\xf5\x84\xc2\x2d\xb9\x01\x2c\x0e\xf0\x26\x98\x73\xd1\xb8\x79\x65\x5c\xaf\xe6\x75\x62\x30\x61\x85\x7a\x8b\xf1\xb4\xc7\xfd\x97\xd0\x95\x71\x1e\x83\x69\xa7\xf9\x27\xa7\xf0\x84\xaf\x6b\xc8\xa7\xd5\x57\x70\x55\xa4\xf5\x90\x3f\xf7\x64\xa7\x9b\x91\x9f\xe5\x70\x1d\xe2\x86\x5d\xa8\xa0\xb7\xbe\xaf\x02\xf7\xea\xde\x98\x3d\x0c\x9a\x5b\xa8\x9c\xc2\x95\x80\xa7\x53\xbc\x62\x76\x59\x8e\x22\x46\x39\x64\x0f\x46\xea\x8d\x79\x70\xc3\xe1\xd8\xe5\x3f\x48\x33\x46\xd6\x6a\xdb\xf5\x3c\x56\x3e\x36\x58\x69\x7b\x46\x94\x21\xf8\xe5\x3f\x5f\xff\xfa\xa1\xf4\xb1\xe8\xba\xde\x8f\x8d\x2c\xce\xbc\xd0\xaa\xbc\xc8\x0e\x59\xb6\x58\xc0\x3b\x69\x95\x41\x68\x99\xbb\x23\x7b\x4f\x8a\xd1\x46\xe3\xbb\x60\xcb\x09\xbf\xc5\x1c\xc7\x82\x6d\x25\x1d\xdd\x5f\x3b\xb5\x0f\x69\xfa\x41\x73\xd5\x46\xc7\xb2\x41\xce\x45\xe5\x2c\xa3\xe5\x39\xef\x3b\x14\xc5\xb1\xd0\x95\xf4\x08\x42\x76\x9d\xd1\x95\x0c\x51\x16\x5f\xbd\xb3\x62\x39\x75\x61\x02\x85\x15\x5c\x9c\x24\x40\xaf\x9d\xda\x17\xc9\x79\x4d\x28\x6f\x1f\x41\xdd\xcd\x87\x61\x98\xd7\x8e\x36\xf3\x9e\x0c\x86\xeb\x83\x6a\x0a\xb3\x58\xc0\x4d\x8b\x10\xc0\x82\x5e\x79\x24\xa8\x1d\x41\x64\xda\xa4\x72\x1e\x94\x0b\x17\xa9\xd5\x7e\x06\xde\xc1\xd7\x3e\xa8\x98\x91\x7b\x90\xc6\xd9\xe6\x04\x15\x49\xa0\x39\x38\x11\x85\xeb\x6d\xff\x05\xbf\xc8\xfd\x3a\x2a\x88\x6f\x5d\x6f\xd4\xa8\x81\xd4\x57\x0c\xde\x6d\x10\x6e\xb5\x55\xe0\xea\x20\x64\x1d\xd2\x09\x2a\x24\x7c\x2c\x42\x4c\xef\xff\x41\x4b\xac\xe3\x32\xa8\xb4\xf0\x70\x8b\xd8\x05\x35\x09\x59\xc1\x20\xf7\x31\x6f\xeb\x86\x19\x48\x7f\x7e\x38\xed\x41\x7b\x68\xdd\xf0\xdd\xa1\xd6\xd8\xca\x2d\xfa\xf2\x54\xf1\x20\x30\x17\xfd\x9a\x3d\xd0\xa3\xe2\x9f\xee\x91\xab\x18\x79\xee\x99\x50\x6e\x1e\x61\xc0\x11\xee\x11\x34\xc6\x1d\x2f\x3a\x23\xf5\x63\x0c\x7a\x64\xff\x21\x4b\x24\x0e\xb7\xf8\x77\x32\xc9\xb3\x23\xc7\xae\x72\x06\x9e\x82\x58\x2e\x16\xe1\x4a\x4f\x74\x6e\x9d\x67\x51\xa4\x15\x47\xba\xd1\x56\x86\xad\x47\xa4\x70\x85\x7e\x4b\x8d\x5b\x25\xb2\x8b\x10\x5a\x2c\xcf\x73\x1a\xc7\x95\x68\x51\x2a\x24\x3f\xda\xca\xf4\x95\x6c\x1b\xe4\xd6\xa9\x64\x1a\x3f\x92\x85\x70\xe3\x18\xbf\x48\xa5\x28\x99\x75\x97\x4c\x3d\x19\xb1\x3c\x1e\xe7\x78\xc2\x20\x98\xf9\x59\x62\x33\xc8\x91\x28\xde\xe3\xde\x70\x71\x21\x8b\x44\x27\x35\x0c\x63\xa2\x8a\xca\x09\xcf\xaf\xae\xd2\xe2\x28\xce\x48\x94\xc4\x2c\xfe\x84\xc7\xc3\x38\x09\x20\x08\xd9\xa8\xe2\xb4\x9f\x90\x92\x2d\xd2\x24\x5e\xb5\x3c\x45\x1f\x41\xa0\x92\x51\x36\x70\x77\x2f\x78\x40\x3b\x09\xf0\x5b\xa9\xcd\x38\x81\x23\xc2\x71\x10\x8c\x82\xb9\x84\x51\x7a\x8b\x1f\x4e\x9d\xd0\x97\x9e\x25\xf7\x3e\x8a\x64\xfa\xff\x25\x6c\x2e\x4e\x0e\xc8\xa3\x35\x35\xe9\xdc\x62\x55\x3e\x0e\xf0\x32\xbc\x7e\x46\xb7\xd0\xf2\x19\x88\xb5\xf4\xf8\xe2\x99\x28\x92\x8e\x8f\x6a\x7b\x77\x17\x2a\x5d\xde\x90\x6e\x1a\xa4\x77\x37\x37\x1f\xe1\x70\xc8\x70\xd7\x39\x62\xff\x49\x7c\xff\xf0\xf9\x0c\xab\xd3\xa3\xeb\x42\x83\xd3\x18\x39\x89\xf4\xc9\x9e\x1d\x52\x34\x34\x1e\x7f\x28\x04\x6e\xd1\xf2\xe5\xfb\x30\xd2\x28\x5a\xca\xf1\xf9\x78\xce\xa2\x6b\xa6\xbf\x22\xd2\xe5\xb0\x4b\xd3\xfa\x1e\x7d\x46\xa0\x87\x48\x12\xc0\x27\xdc\xe4\xf6\xe4\x49\xda\x50\xc6\x17\xc0\xdf\x99\xe0\xf7\xfc\xcf\x47\xf1\xc5\x0c\x16\x69\xb6\x8b\xa9\x6b\xa9\x8c\x56\xc1\xe1\xf0\x67\x00\x00\x00\xff\xff\xad\x8e\xd3\x2a\x66\x0b\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2918, mode: os.FileMode(420), modTime: time.Unix(1494431050, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x4b\xcc\x4d\x55\xb2\x52\x50\xaa\xae\xd6\x73\x2b\xcd\x4b\x2e\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\x55\xd2\x01\x49\x97\xa5\x16\x15\x67\xe6\xe7\x81\x54\x18\xe8\x19\xe8\x19\x40\x44\x53\x52\x0b\x52\xf3\x52\x52\xf3\x92\x33\x53\x8b\x95\xac\x14\x40\x06\x81\x44\xf3\x4b\x52\xf3\xca\x40\x4a\xe3\x4c\xc0\x6a\xb9\x14\x14\x6a\xb9\x6a\x01\x01\x00\x00\xff\xff\xe6\x48\x09\x7c\x67\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 103, mode: os.FileMode(420), modTime: time.Unix(1493816950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

