// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xd1\x8f\xdb\xb6\x0f\x7e\xcf\x5f\xc1\xdf\x4b\x65\xff\x9a\x38\xb7\xa1\xed\x8a\x00\xe9\x80\x0e\x2d\x8a\xa1\xeb\x8a\xdd\x0d\x7b\x28\x8a\x42\xb1\x68\x5b\x3d\x45\x72\x29\x3a\x4e\x70\xc8\xff\x3e\x48\x96\x9d\x34\xbd\x03\x5a\x60\x4f\x89\x45\xea\xe3\x27\x92\xfa\x28\xc2\x2f\x9d\x26\xcc\x84\x72\x8c\x76\x27\xf2\xa2\x74\xb6\xd2\x75\x96\xcf\x66\x55\x67\x4b\xd6\xce\x82\x6f\xf4\x16\x32\x25\x59\xce\xa1\x94\xc6\x6c\x64\x79\x9b\xc3\xdd\x0c\xc0\x20\x03\xa1\x6f\x9d\xf5\xf8\x5e\x1e\x8c\x93\x0a\xd6\x20\xc4\x6c\x06\xb0\x5c\xc2\x75\x2b\x7b\x0b\xdc\x20\x4c\x58\xd2\x2a\xd0\xf6\x33\x96\x1c\xd7\xd1\xee\xa0\x22\xb7\x8d\x1f\xad\x24\xb4\x0c\x2d\xb9\x12\xbd\x2f\x66\x00\xa5\xb3\x9e\xa1\x85\x35\x4c\x44\xcb\x46\x1b\xf5\x29\xf9\x88\xbc\xc0\x3d\x96\xaf\xb5\xc1\x4c\x14\xcb\xbb\xbb\xe2\x75\x0a\xf4\x4e\x6e\xf1\x78\x14\x73\xf8\xf0\x71\x1e\xa9\x42\x88\xb5\x9a\xc0\xd1\xee\xe6\x71\x75\xb9\x84\xb7\x92\x6a\x9c\xce\xe1\xc1\xed\x90\xc0\xb3\xd2\x16\x7a\x24\x8c\xdf\xd4\x59\x6d\xeb\x48\x53\x61\x25\x3b\xc3\xd1\xc3\xc1\xa6\xab\x2a\xa4\x62\xc4\xba\xd6\xb6\x44\xe8\x11\x94\xb3\x82\xc1\x22\x2a\x60\x07\xbd\xa3\x5b\x90\x1b\xd7\x31\x48\x7b\x00\xc7\x0d\x52\x38\x5d\xd9\x51\x3c\x73\x38\x1e\x7a\xf6\xe0\x08\x18\xad\xb4\xec\xe7\x50\xeb\x1d\x82\x66\x90\xd0\xa0\x34\xdc\x1c\x60\x2b\xf7\x31\xd0\x56\xee\x5f\xc6\xb8\x2b\xf8\xe9\xea\xc9\xf3\xa7\xbf\x3c\x83\xff\xc3\xcf\x4f\x67\x00\xc7\x3c\xe4\xbe\x2d\x22\xfd\xc2\x23\xbf\xb2\xa5\x53\xda\xd6\x99\xe8\xb8\x5a\x3c\x17\x79\xaa\xcd\x5b\x57\x83\x67\x69\x95\x24\x05\x48\x04\x5b\xf4\x5e\xd6\xe8\x03\xdd\xc9\xe0\x3a\x1e\xe1\x90\xa8\x70\x36\x13\xa1\x0f\xc4\x1c\xc2\x0f\xac\x5f\xa4\xdc\x86\x42\x39\x83\x85\x71\x75\x6c\x94\xfc\x6b\x2a\xae\xe3\x87\xf7\x5e\x36\xd0\xe3\x75\x74\x28\xd8\x5d\x33\x05\xe6\xe7\x60\x01\x05\x89\x1c\x89\x79\x64\x7d\x2f\x03\x51\xbb\x45\x69\x5c\xa7\x16\x55\xea\x5e\xc2\x12\xf5\x0e\xe3\x49\xc7\xbd\x97\xb0\xa5\x71\x1e\x83\x69\xaf\xf9\x37\xa7\xf0\x84\xad\x2b\xc8\xa6\xd5\x17\x70\x95\xa7\xf5\xc0\x9d\x3b\xb2\xd3\xad\xc8\x2c\xf6\xf0\x2a\x84\xc8\xc4\x75\x88\x1b\x76\xa1\x82\xce\xfa\xae\x0c\x7d\x57\x75\xc6\x1c\xa0\xd7\xdc\x40\xe9\x14\xae\x05\x3c\x9e\xe2\xe5\xf3\xcb\x54\xe4\x31\xca\x71\x76\x6f\xa4\xce\x98\x7b\x37\x1c\xc7\x0a\xff\x43\x9a\x31\x76\xac\xb6\x6d\xc7\x43\xd6\x63\x71\x95\xb6\x67\x4d\xd2\x07\xbf\xec\xf7\xeb\x3f\xdf\x15\x3e\x26\x5c\x57\x87\xa1\x88\xf9\x99\x17\x5a\x95\xe5\xb3\xe3\x6c\xb6\x5c\xc2\x1b\x69\x95\x41\x68\x98\xdb\xb1\x73\x4f\x6a\xd1\x44\xe3\x9b\x60\xcb\x08\xbf\x44\x8e\x43\xc2\x76\x92\x46\xf7\x97\x4e\x1d\x02\x4d\xdf\x6b\x2e\x9b\xe8\x58\xd4\xc8\x99\x28\x9d\x65\xb4\xbc\xe0\x43\x8b\x22\x1f\x13\x5d\x4a\x8f\x20\x64\xdb\x1a\x5d\xca\x10\x65\xf9\xd9\x3b\x2b\x56\x53\x15\x26\x50\x58\xc3\xc5\x49\x02\xf4\xc6\xa9\x43\x9e\x9c\x37\x84\xf2\xf6\x01\xd4\xfd\xa2\xef\xfb\x45\xe5\x68\xbb\xe8\xc8\x60\xb8\x3a\xa8\xa6\x30\xcb\x25\xdc\x34\x08\x01\x2c\x68\x95\x47\x82\xca\x11\xc4\x4e\x9b\x14\xce\x83\x72\xe1\x12\x35\xda\xcf\xc1\x3b\xf8\xdc\x05\x05\x33\xf2\x00\xd2\x38\x5b\x9f\xa0\x62\x13\x68\x0e\x4e\x44\xe1\x6a\xdb\xff\xc1\x1f\xf2\xb0\x89\xea\xe1\x1b\xd7\x19\x35\xe8\x1f\x75\x25\x83\x77\x5b\x84\x5b\x6d\x15\xb8\x2a\x88\x58\x8b\x74\x82\x0a\x84\xc7\x24\x44\x7a\xbf\x06\x1d\xb1\x8e\x8b\xa0\xd0\xc2\xc3\x2d\x62\x1b\x94\x24\xb0\x82\x5e\x1e\x22\x6f\xeb\xfa\x39\x48\x7f\x7e\x38\xed\x41\x7b\x68\x5c\xff\xcd\xa1\x36\xd8\xc8\x1d\xfa\xe2\x94\xf1\x20\x2e\x17\xf5\x9a\xdf\x53\xa3\xfc\xbf\xae\x91\x2b\x19\x79\xe1\x99\x50\x6e\x1f\xe8\x80\x11\xee\x01\x34\xc6\x3d\x2f\x5b\x23\xf5\x43\x1d\xf4\xc0\xfe\xe3\x2c\x35\x71\xb8\xc5\x7f\x93\x49\x9e\x2d\x39\x76\xa5\x33\xf0\x18\xc4\x6a\xb9\x0c\x57\x7a\x6a\xe7\xc6\x79\x16\x79\x5a\x71\xa4\x6b\x6d\x65\xd8\x3a\x22\x85\x2b\xf4\x57\x2a\xdc\x3a\x35\xbb\x08\xa1\xc5\xea\x9c\xd3\x30\xaa\x44\x83\x52\x21\xf9\xc1\x56\xa4\xaf\x64\xdb\x22\x37\x4e\x25\xd3\xf0\x91\x2c\x84\x5b\xc7\xf8\x49\x2a\x45\xc9\xac\xdb\x64\xea\xc8\x88\xd5\x78\x9c\xf1\x84\x41\x30\xb3\x33\x62\x73\xc8\x90\x28\xde\xe3\xce\x70\x7e\x21\x8b\x44\x27\x35\x0c\x23\xa2\x8c\xca\x09\x4f\xaf\xae\xd2\x22\x37\xe4\xfa\x60\x4a\x62\x16\x7f\xc2\xc3\x61\x98\x02\x10\x84\x2c\xae\x31\x1d\x26\xa4\x64\x8b\x6d\x12\xaf\x5a\x96\xa2\x0f\x20\x50\xca\x28\x1b\xb8\xff\x2a\x78\x40\x3b\x09\xf0\x6b\xa9\xcd\x30\x7d\x23\xc2\x38\x08\x06\xc1\x5c\xc1\x20\xbd\xf9\x0f\x53\x27\xf4\x85\x67\xc9\x9d\x8f\x22\x99\xfe\x7f\x0a\x9b\xf3\x93\x03\xf2\x60\x4d\x45\x3a\xb7\x58\x95\x0d\xc3\xbb\x08\x2f\x9f\xc1\x2d\x94\x7c\x0e\x62\x23\x3d\x3e\x7b\x22\xf2\xa4\xe3\x83\xda\xde\xdd\x85\x4c\x17\x37\xa4\xeb\x1a\xe9\xcd\xcd\xcd\x7b\x38\x1e\x67\xb8\x6f\x1d\xb1\xff\x20\xbe\x7d\xf4\x7c\x84\xf5\xe9\xc1\x75\xa1\xc1\x69\x8c\x9c\x44\xfa\x64\x9f\x1d\x53\x34\x34\x1e\x7f\x28\x04\xee\xd0\xf2\xe5\xdb\x30\xb6\x51\xb4\x14\xc3\xd3\xf1\x7b\xbb\xe8\x72\xd2\xa5\x51\x3d\x0e\xc2\xe0\x3f\x80\xc0\xa3\x47\x09\xae\x88\x63\xfd\x7b\xc6\xf2\x57\xfe\xe7\xb0\x93\xef\x94\xfb\x94\x0c\xab\xe0\x78\xfc\x37\x00\x00\xff\xff\xc5\x54\xcf\xc5\x28\x0b\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2856, mode: os.FileMode(420), modTime: time.Unix(1491419838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x4b\xcc\x4d\x55\xb2\x52\x50\xaa\xae\xd6\x73\x2b\xcd\x4b\x2e\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\x55\xd2\x01\x49\x97\xa5\x16\x15\x67\xe6\xe7\x81\x54\x18\xe8\x19\xe8\x19\x40\x44\x53\x52\x0b\x52\xf3\x52\x52\xf3\x92\x33\x53\x8b\x95\xac\x14\x40\x06\x81\x44\xf3\x4b\x52\xf3\xca\x40\x4a\xe3\x4c\xc0\x6a\xb9\x14\x14\x6a\xb9\x6a\x01\x01\x00\x00\xff\xff\xe6\x48\x09\x7c\x67\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 103, mode: os.FileMode(420), modTime: time.Unix(1491419838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

