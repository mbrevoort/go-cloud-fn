// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x6d\x8f\x1b\xb7\x11\xfe\xbe\xbf\x62\x02\x04\xe1\x6e\xad\xdb\x75\x82\x38\x0d\x0e\x50\x5a\xa4\xb0\xe1\x14\x69\xea\xe6\x5c\xf4\x43\x60\x38\xd4\x72\xb4\x4b\x1f\x45\x6e\xf8\x22\x9d\x70\xd0\x7f\x2f\x86\xe4\xbe\x48\xd6\x15\x36\xd0\x2f\x77\x12\x67\xf8\xcc\xfb\xc3\xd1\x9e\x5b\x18\xc2\xc6\x85\x0d\xac\xc1\xe2\x1f\x41\x5a\x2c\xd9\x5f\x3b\x63\x3a\x85\x37\xad\x32\x41\x34\x49\xce\xaa\xb2\x2a\x26\x0d\x61\x3c\xea\x3d\xab\xea\xd6\xe8\xad\xec\xca\xaa\x28\xb6\x41\xb7\x5e\x1a\x0d\xae\x97\x3b\x28\x05\xf7\x7c\x05\x2d\x57\x6a\xc3\xdb\xfb\x0a\x1e\x0b\x00\x85\x1e\x2c\xba\xc1\x68\x87\x6f\xf8\x51\x19\x2e\x60\x0d\x8c\x15\x05\x40\xd3\xc0\xdd\xc0\x0f\x1a\x7c\x8f\x30\x61\x71\x2d\x40\xea\x0f\xd8\xfa\x78\x8e\x7a\x0f\x5b\x6b\x76\xf1\xcb\xc0\x2d\x6a\x0f\x83\x35\x2d\x3a\x57\x17\x00\xad\xd1\xce\xc3\xb0\x0c\xa5\xed\xa5\x12\xef\xb3\x0e\xab\x6a\x7c\xc0\xf6\x95\x54\x58\xb2\xba\x79\x7c\xac\x5f\x65\x43\xbf\xf0\x1d\x9e\x4e\x6c\x05\xbf\xbd\x5b\x45\x57\x81\x6c\xdd\x4e\xe0\xa8\xf7\xab\x78\xda\x34\xf0\x33\xb7\x1d\x4e\x71\x38\x30\x7b\xb4\xe0\xbc\x90\x1a\x0e\x68\x31\x7e\xb7\x41\x4b\xdd\x45\x37\x05\x6e\x79\x50\x3e\x6a\x18\xd8\x84\xed\x16\x6d\x3d\x62\xdd\x49\xdd\x22\x1c\x10\x84\xd1\xcc\x83\x46\x14\xe0\x0d\x1c\x8c\xbd\x07\xbe\x31\xc1\x03\xd7\x47\x30\xbe\x47\x4b\xd1\xb5\xc1\xc6\x98\x29\x3c\x74\xde\x81\xb1\xe0\x51\x73\xed\xdd\x0a\x3a\xb9\x47\x90\x1e\x38\xf4\xc8\x95\xef\x8f\xb0\xe3\x0f\xd1\xd0\x8e\x3f\xfc\x18\xed\xde\xc2\xd7\xcf\xbf\xfd\xfe\xc5\x9f\xbf\x83\x3f\xc1\x37\x2f\x0a\x80\x53\x45\xb9\x1f\xea\xe8\x7e\xed\xd0\xbf\xd4\xad\x11\x52\x77\x25\x0b\x7e\x7b\xf3\x3d\xab\x72\x6d\x7e\x36\x1d\x38\xcf\xb5\xe0\x56\x00\x5a\x0b\x3b\x74\x8e\x77\xe8\xc8\xdd\x49\x60\x82\x1f\xe1\xd0\xda\xda\xe8\x92\x51\x1f\xb0\x15\xd0\x3f\x58\xff\x90\x73\x4b\x85\x32\x0a\x6b\x65\xba\xd8\x28\xd5\xb9\x2b\x26\xf8\xa7\xef\x5e\x36\xd0\xb3\x75\x54\xa8\xbd\xb9\xf3\x96\x3c\x5f\x82\x11\x0a\x5a\x6b\x2c\x5b\x45\xaf\x27\x14\xdf\x5b\x73\x00\x8d\x07\x78\x49\xe2\x92\x75\x26\xb5\xfb\xcd\x36\x77\xb0\xc5\x16\xe5\x1e\x63\xb4\xe3\xfd\x4b\xe8\x56\x19\x87\x24\x7a\x90\xfe\x6f\x46\xe0\x8c\x2f\xb7\x50\x4e\xa7\x3f\xc0\xf3\x2a\x9f\x93\xff\x3e\x58\x3d\x4d\x46\xb9\xf0\xe1\x8e\xec\xd2\x2d\x14\x10\xb4\x0b\x2d\xf5\xde\x36\x28\x75\x84\x83\xf4\x3d\xb4\x46\xe0\x9a\xc1\xb3\xc9\x5e\xb5\xba\x4c\x47\x15\xad\x9c\x8a\xab\x96\x82\x52\x57\x2f\x9c\xc6\x2a\xff\xc7\x4a\x8f\xb1\x6b\xa5\x1e\x82\x4f\x99\x8f\x05\x16\x52\x2f\x1a\xe5\x40\x7a\xe5\xdf\xef\xfe\xf9\x4b\xed\x62\xd2\xe5\xf6\x98\x0a\x59\x2d\xb4\x50\x8b\xb2\x2a\x4e\x45\xd1\x34\xf0\x9a\x6b\xa1\x10\x7a\xef\x87\xb1\x7b\x67\xc6\xe8\xa3\xf0\x35\xc9\x4a\x8b\x7f\x44\x1f\x53\xc2\x88\x9f\xb2\xfa\x8f\x46\x1c\xc9\x4d\x77\x90\xbe\xed\xa3\x62\xdd\xa1\x2f\x59\x6b\xb4\x47\xed\x6f\xfc\x71\x40\x56\x8d\x89\x6e\xb9\x43\x60\x7c\x18\x94\x6c\x39\x59\x69\x3e\x38\xa3\xd9\xed\x54\x85\x09\x14\xd6\x70\x11\x09\x41\x6f\x8c\x38\x56\x59\x79\x63\x91\xdf\x3f\x81\xfa\x70\x73\x38\x1c\x6e\xb6\xc6\xee\x6e\x82\x55\x48\xe3\x83\x62\x32\xd3\x34\xf0\xb6\x47\x20\x30\xe2\x2b\x87\x16\xb6\xc6\x42\xec\xb4\x89\xe5\x1c\x08\x43\x83\xd4\x4b\xb7\x02\x67\xe0\x43\x20\x16\x53\xfc\x08\x5c\x19\xdd\xcd\x50\xb1\x09\xa4\x27\x25\x6b\x69\xbc\xf5\x17\xf0\x0f\x7e\xdc\x44\x06\x71\xbd\x09\x4a\x24\x0e\xb4\xa1\xf5\xe0\xcc\x0e\xe1\x5e\x6a\x01\x66\x4b\x44\x36\xa0\x9d\xa1\xc8\xe1\x31\x09\xd1\xbd\xbf\x10\x97\x68\xe3\x6b\x62\x69\xe6\xe0\x1e\x71\x20\x36\x21\xaf\xe0\xc0\x8f\xd1\x6f\x6d\x0e\x2b\xe0\x6e\x19\x9c\x74\x20\x1d\xf4\xe6\xf0\x51\x50\x1b\xec\xf9\x1e\x5d\x3d\x67\x9c\x08\xe6\xa2\x5e\xab\x2b\x35\xaa\xfe\xdf\x35\x32\xad\x47\x7f\xe3\xbc\x45\xbe\x7b\xa2\x03\x46\xb8\x27\xd0\x3c\x3e\xf8\x66\x50\x5c\x3e\xd5\x41\x4f\xdc\x3f\x15\xb9\x89\x69\x8a\xff\x6d\x55\xd6\x1c\xac\xf1\xa6\x35\x0a\x9e\x01\xbb\x6d\x1a\x1a\xe9\xa9\x9d\x7b\xe3\x3c\xab\xf2\x89\xb1\xb2\x93\x9a\xd3\xd5\x11\x89\x46\xe8\xd7\x5c\xb8\x75\x6e\x76\x46\xa6\xd9\xed\xd2\xa7\xf4\x5c\xb1\x1e\xb9\x40\xeb\x92\xac\xce\xdf\xb2\x6c\x87\xbe\x37\x22\x8b\xd2\x97\x2c\xb1\xb8\x33\x1e\xdf\x73\x21\x6c\x16\xcb\x21\x8b\x82\x55\xec\x76\x0c\x67\x8c\x90\x08\xb3\x5c\x38\xb6\x82\x12\xad\x8d\x73\x1c\x94\xaf\x2e\x68\xd1\xda\x99\x0d\xe9\x99\x68\x23\x73\xc2\x8b\xe7\xcf\xf3\x61\x22\x67\xb4\x36\x93\x59\xfc\x47\xcb\x43\x7a\x09\x80\x88\x2c\xb1\xb8\x3d\x4e\x48\x59\x16\xdb\x24\x8e\x5a\x99\xad\x27\x10\x68\x79\xa4\x0d\x7c\x38\x33\x4e\x68\x33\x01\xbf\xe2\x52\xa5\x17\x38\x22\x8c\x0f\x41\x22\xcc\x5b\x48\xd4\x5b\x7d\xb6\xeb\x16\x5d\xed\x3c\xf7\xc1\x45\x92\xcc\x9f\xdf\xd3\xe5\x6a\x56\x40\x9f\xa4\xb9\x48\x4b\x89\x16\x65\x7a\xc0\x6b\xda\x7e\x92\x1a\x95\x7c\x05\x6c\xc3\x1d\x7e\xf7\x2d\xab\x32\x8f\x9f\x16\x8b\x98\x37\x83\x6c\x69\xb3\x79\x65\xcd\xee\x57\x74\x26\xd8\x16\x89\x38\xd3\xa7\x79\x27\x1b\xb8\xf5\x2e\xb6\x66\x92\xd4\x6e\x50\xd2\x97\x2c\x02\xb8\x26\x0e\x24\x55\x2e\xea\xd5\x0a\x75\xe7\x7b\x58\xaf\xe1\x9b\x6a\x7a\x93\xe3\x4b\x13\xe5\xbf\x7d\xfd\xae\x48\x2f\x50\x3e\x8d\xd5\x5a\xfa\x65\xd1\xdb\xe3\x9b\xb0\xb9\x0b\x1b\x28\x71\x8f\xda\xaf\x60\x6c\xf4\x58\x88\x6b\x7b\xe3\x14\x0c\xac\xaf\x07\x96\x90\xea\x29\xba\x7c\x8f\x18\xe5\xce\x53\x9d\x97\x19\x4c\xba\x31\x8f\x69\x51\x9d\xf2\x78\xbe\x47\x2c\x9a\x6e\xd1\x58\x19\xb3\x2a\x8a\xe2\x7c\x97\xf9\xfd\x5f\x01\x03\xd2\xe6\x17\x63\x24\xe2\xcd\x71\x46\x83\xf0\xe5\x63\x32\x1c\xff\xfe\x24\x4e\xd4\x69\x31\x18\xf8\xf2\x71\x0a\xea\xf4\x7b\x7c\x8e\xa7\xa0\x61\x9d\x57\xf4\x3a\x7e\x2d\x27\xc5\xb1\x2c\x5f\xc4\x93\xea\xca\x6e\xc5\x96\xa9\xde\xa6\xe6\xde\x60\xcb\x83\xc3\x8c\x1d\xf4\xbd\x36\x87\x91\x73\x2f\x37\x86\xb3\xaa\x54\xe3\xb4\xc7\x9b\xf5\x10\x36\x4a\xba\x3e\x2f\xfa\xe5\x10\x36\x2f\x69\xe4\xf3\x5e\xf8\x93\x70\x17\x63\x9f\x14\xe6\xe1\xfb\x44\x3f\xd9\x0a\xf2\xcd\x3c\xc7\xa8\x1c\x5e\x05\x49\xc9\x17\x71\x9e\xc7\x74\xcf\xde\x9c\xe2\x03\xf6\x99\x65\x58\xcc\x70\xd3\x80\xf3\x52\xa9\x31\x47\xb4\x24\x8d\xe9\x49\x2b\x62\x34\x70\xf6\xeb\x85\x7e\x6c\x04\xfa\x94\x5f\x92\x27\xb3\x3a\x6e\x49\x8f\x8f\x94\xaa\xfa\xad\x95\x5d\x87\xf6\xf5\xdb\xb7\x6f\xe0\x74\x2a\xf0\x61\x30\x34\x58\xec\xe3\x1f\x2c\xef\x60\x3d\x9b\xbb\xd8\x9d\xb2\xa3\xf3\x72\x35\xcb\x8b\x53\xb6\x16\x93\xf9\x39\x26\xf2\xb8\x9e\xcf\x67\xa4\xff\x79\xa4\xce\xd9\x9f\x06\xe5\x7f\x3c\x00\xd9\xcb\x45\x03\x8c\x36\x22\xc6\x64\xe8\xf2\x29\x48\xe0\xd7\x08\x3f\x4e\xe6\x68\x2b\xab\x7d\xf5\x55\xbe\x50\xc7\x52\x7d\x8a\xf9\xf9\x59\x38\xbb\xf9\xb1\x4b\x67\xb5\x4d\x3b\x36\xcb\xbb\x3b\x9b\xaa\x9b\xd3\xad\x05\x9c\x4e\xff\x0d\x00\x00\xff\xff\xf4\x57\x94\xda\x75\x0f\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 3957, mode: os.FileMode(420), modTime: time.Unix(1497639992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\xcc\x5a\x63\x0a\xae\xba\x72\xe5\xd2\x23\x08\x6d\xf2\x28\x81\x76\xa6\x98\xa6\x08\x21\x77\x97\xa1\xe0\xf6\xbd\x8f\xbf\x76\x44\x2c\xe3\x0a\x1e\x88\x6b\x75\xcf\x22\x61\x4f\x2a\xaf\x71\x45\x6b\x7c\xb1\xfb\xc0\x27\x27\x15\x13\xde\x79\xe7\xcf\x35\x62\x83\x44\x48\x48\xc8\x3c\x90\x85\x6c\xd5\x1d\x72\x18\x7d\xdf\xff\x96\x88\x1f\xb3\xea\xbc\xe0\x1a\x16\x2d\xf1\xb6\x95\x29\x97\xe9\x0c\xf6\xbd\xfb\x72\x47\xd4\xba\xf6\x0b\x00\x00\xff\xff\xc2\x5c\xfd\x85\x8d\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 141, mode: os.FileMode(420), modTime: time.Unix(1494442094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

