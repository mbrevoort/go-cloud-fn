// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x41\x8f\xdb\x38\x0f\xbd\xfb\x57\xb0\x27\xdb\x68\xc6\xee\xe5\x03\x3e\x0c\x90\x5d\xa0\x40\x8b\xee\x62\xdb\x2d\x3a\xb3\xd8\x43\x51\x14\x1a\x89\x89\xd5\x91\x45\x97\xa2\x93\x09\x06\xf9\xef\x0b\x49\x76\xe2\x74\x3a\x87\x05\xf6\x94\x58\xa4\x1f\x1f\xc9\x47\xca\x8c\xdf\x47\xcb\x58\x95\x86\x04\xfd\xae\xac\x1b\x4d\x7e\x63\xb7\x55\x5d\x14\x6d\x0b\xef\x94\x37\x0e\xe1\xb5\xd2\xf7\x5b\xa6\xd1\x1b\xc0\x1d\x7a\x09\xa0\xb4\x26\x36\xd6\x6f\x41\x08\xc2\x80\xba\xd8\x8c\x5e\x8b\x25\x0f\xa1\xb3\x7d\x7e\x8f\xa1\x32\x4a\x54\x0d\x8f\x05\x00\xa3\x8c\xec\xc1\xe3\x1e\x3e\x32\xf5\x36\x60\x55\x31\x06\x72\x3b\x5c\x01\xe3\x37\xd4\x52\xc3\xfa\x97\xe4\x0b\xd0\xb6\x70\x33\xa8\xbd\x07\xe9\x10\x4e\xd0\xca\x1b\xb0\x3e\xba\xa6\x73\xf4\x3b\xd8\x30\xf5\xe9\x61\x50\x8c\x5e\x60\x60\xd2\x18\x42\x93\x50\x34\xf9\x20\x30\xc0\x1a\x4e\x79\xea\xce\x3a\xf3\x75\xf2\x2a\xeb\x06\x1f\x50\xbf\xb5\x0e\xab\xb2\x69\x1f\x1f\x9b\xb7\x53\xa8\x0f\xaa\xc7\xe3\xb1\x5c\xc1\xe7\x2f\xab\x89\x12\xc4\x78\xd7\xa7\x00\xe8\x77\xe9\xf8\x58\xa7\x9f\x9d\x62\x70\x2a\xc8\x7b\x0c\x41\x6d\x31\x9d\x0d\x4d\x10\x63\x7d\x13\x50\xde\x78\x4d\xb1\x5c\x55\x39\xca\xe6\xea\xff\x65\x3d\x67\xf9\x07\x6d\x21\x88\xf2\x46\xb1\x01\x64\x86\x3e\x03\x84\x54\xd8\x85\xe1\x8c\x88\xcc\x0d\xf9\xaa\x8c\xb5\x2d\x57\x50\x21\xf3\xa2\x72\x39\x6b\x72\xd8\x20\x33\x71\xb4\x36\x42\x37\xc2\x31\x7a\x5d\x2f\x39\x27\x34\x1a\xe5\x02\x8d\x46\xf9\x29\x9a\xa3\x6d\xb4\x3d\xc1\x82\x65\xda\xb0\x06\x1a\xe5\x32\x46\x04\xd7\x8e\x02\x46\x74\x4d\x06\x2f\xe0\xed\x26\x1f\xc2\x8b\xf5\x1a\x5e\xd5\xa7\xf3\x54\x9c\xdb\xce\x06\xe8\x51\xf9\x90\x5a\x1c\x95\x05\x1b\x65\x1d\x1a\x68\x61\x50\xde\xea\x7b\x34\x0d\xdc\x10\xec\x71\xd2\x10\x74\x8a\x4d\x73\x02\xc9\x87\xd5\x4c\xf5\x08\xe8\x02\x5e\x06\xf9\x94\x45\x98\x45\x94\x95\x09\x7b\x2b\x5d\x3a\x70\x4a\x30\x48\x4c\x6a\x18\x25\x8b\x2d\xd7\x6c\x89\xf0\x9b\x07\xad\x02\x02\x6d\x12\xc5\x3e\x8e\x45\x27\x32\xac\x40\x62\x02\x36\xb3\x67\x0c\x03\xf9\xe8\x76\x17\x39\x2d\x39\x26\x02\xd5\xa2\x8e\x27\xbe\xcb\x52\xb6\x2d\xfc\xcd\x56\x32\xd3\x0c\xd2\x4e\x6a\x69\xa3\xbe\x23\x51\xa1\x53\xa5\xca\x00\x49\x7e\x69\x6a\x82\xdd\x7a\xe5\x66\x98\x37\xde\x44\xb2\xd6\x0f\xe3\xc4\x63\x96\xea\x3e\x06\xa8\x7e\xbf\xf9\xf3\x43\x13\x52\x9b\xed\xe6\x90\x87\xb8\xbe\xf0\x43\x6f\x52\x51\x8f\x75\x71\x5c\x6e\x8a\x98\x36\x4c\x64\xce\x2b\xa1\x4b\xc6\x77\xd1\x56\x31\x7e\x8f\xf3\x1e\x72\xab\xe3\xd8\x4c\xee\xaf\xc9\x1c\x8a\x02\x20\xec\xad\xe8\x2e\x39\x36\x5b\x94\xaa\xd4\xe4\x05\xbd\x5c\xc9\x61\xc0\xb2\x9e\x25\x92\x2a\x5e\xaa\x61\x70\x56\xab\x18\xa5\xfd\x16\xc8\x97\xd7\xc5\x5c\xd4\x13\x28\xac\xe1\x87\x84\x22\xf4\x1d\x99\xc3\x5c\xe6\x3b\x46\x75\xff\x0c\xea\xc3\xd5\x7e\xbf\xbf\xda\x10\xf7\x57\x23\x3b\x8c\x73\x8c\xe6\x14\x26\x89\x14\x21\x82\xc5\x0d\x14\x90\x61\x43\x0c\xda\xd1\x68\x4e\x7b\x2b\x80\xa1\x38\xd0\x9d\x0d\x2b\x08\x04\xdf\xc6\xb8\x95\x9c\x3a\x80\x72\xe4\xb7\x67\xa8\x24\x3b\x2b\xd1\x89\xf9\x00\xbd\xf2\x2f\xe0\xbd\x3a\xdc\x61\xd4\x77\xe8\x68\x74\x26\xef\x34\x1e\xb5\x40\xa0\x1e\xe1\xde\xe6\x5e\x0e\x4c\x03\xf2\x19\x2a\x12\x9e\x8b\x90\xe8\xfd\x0a\xc4\xe0\x49\x1a\x70\x28\x65\x80\x7b\xc4\x01\xac\x64\x89\xee\xd5\x21\xf1\xf6\xb4\x5f\x81\x0a\xc5\xe5\x04\xda\x00\x1d\xed\x9f\x24\x75\x87\x9d\xda\x61\x68\xce\x15\x8f\x9b\xee\x87\x7e\xad\x7e\xd2\xa3\xfa\xbf\xee\x11\x69\x41\xb9\x0a\xc2\xa8\xfa\x67\x14\x30\xc3\x3d\x83\x26\xf8\x20\xed\xe0\x94\x7d\x4e\x41\xcf\xbc\x7f\x2c\x26\x11\x6f\x46\xe7\xfe\x62\x37\x79\x0e\x4c\x42\x9a\x1c\xbc\x84\xf2\xba\x6d\x4b\x78\x09\x27\x39\x77\x14\xa4\xac\xa7\x13\x62\xbb\xb5\x5e\xc5\x57\x67\xa4\x38\x42\x9f\xa6\xc6\xad\x27\xb1\x97\x31\x74\x79\xbd\xe4\xb4\xca\x86\x0e\x95\x41\x0e\xd9\xd6\x4c\x4f\x93\xad\x47\xe9\xc8\x4c\xa6\xfc\x30\x59\x18\x7b\x12\xfc\xaa\x8c\xe1\xc9\x6c\x87\xc9\x34\xb2\x2b\xaf\xe7\x74\xe6\x0c\x17\x77\x7a\xb5\xe0\x17\x7b\xd3\x48\x87\x3e\x5d\xe5\xa3\x5b\xde\x1c\x31\x95\xb8\x38\xe6\xce\xa6\xe9\x98\xdd\x8a\x69\xef\x35\x41\x94\x8c\x21\x6d\x98\xe9\xff\xd7\x74\x45\x9c\x1d\x50\xb2\x75\x4a\x6d\x69\xf1\x26\x9b\x66\x99\xa4\x3d\xd9\x68\x25\xba\xab\xaa\x05\x95\x45\xa0\xff\xbd\x7a\x55\x3f\x5d\x5e\x8f\x8f\xf1\x1e\x6a\x6e\xd9\x6e\xb7\xc8\xef\x6e\x6f\x3f\xc2\xf1\x58\xe0\xc3\x40\x2c\xe1\x73\xf9\xf4\xbb\xe0\x0b\xac\xcf\x5f\x25\x3f\xac\xb4\xe9\x43\xe7\xbc\xf3\xce\xf6\xe2\x98\x83\xa5\x4b\xe8\xdf\x44\x48\x5f\x5d\x17\xf0\xcb\x8e\x24\x6b\x93\xb6\xf4\x29\x82\x37\x31\xc0\x3f\x01\x00\x00\xff\xff\x6a\x87\xa7\x1a\xdf\x09\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2527, mode: os.FileMode(420), modTime: time.Unix(1491343698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x4b\xcc\x4d\x55\xb2\x52\x50\xaa\xae\xd6\x73\x2b\xcd\x4b\x2e\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\x55\xd2\x01\x49\x97\xa5\x16\x15\x67\xe6\xe7\x81\x54\x18\xe8\x19\xe8\x19\x40\x44\x53\x52\x0b\x52\xf3\x52\x52\xf3\x92\x33\x53\x8b\x95\xac\x14\x40\x06\x81\x44\xf3\x4b\x52\xf3\xca\x40\x4a\xe3\x4c\xc0\x6a\xb9\x14\x14\x6a\xb9\x6a\x01\x01\x00\x00\xff\xff\xe6\x48\x09\x7c\x67\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 103, mode: os.FileMode(420), modTime: time.Unix(1491255478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

