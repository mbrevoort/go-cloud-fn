// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x51\x8f\xdb\x36\x12\x7e\xf7\xaf\x98\x7b\x09\xa5\x8b\x2d\xef\x1d\x92\x5c\xb0\x80\x73\x40\x8a\x04\x41\x91\xa6\x41\x77\x8b\x3e\x04\x41\x40\x8b\x63\x89\x59\x9a\x54\x86\x23\xcb\xc6\xc2\xff\xbd\x20\x45\x49\x5e\x67\x5d\x34\x40\x5f\xd6\x2b\xce\xf0\x9b\xe1\xcc\xc7\x8f\x43\xf8\xad\xd5\x84\x99\x50\x8e\xd1\xee\x44\x5e\x94\xce\x6e\x74\x95\xe5\xb3\xd9\xa6\xb5\x25\x6b\x67\xc1\xd7\x7a\x0b\x99\x92\x2c\xe7\x50\x4a\x63\xd6\xb2\xbc\xcb\xe1\x7e\x06\x60\x90\x81\xd0\x37\xce\x7a\xfc\x28\x0f\xc6\x49\x05\x2b\x10\x62\x36\x03\x58\x2e\xe1\xa6\x91\x9d\x05\xae\x11\x46\x2c\x69\x15\x68\xfb\x15\x4b\x8e\xeb\x68\x77\xb0\x21\xb7\x8d\x1f\x8d\x24\xb4\x0c\x0d\xb9\x12\xbd\x2f\x66\x00\xa5\xb3\x9e\xa1\x81\x15\x8c\x89\x96\xb5\x36\xea\x4b\xf2\x11\x79\x81\x7b\x2c\xdf\x6a\x83\x99\x28\x96\xf7\xf7\xc5\xdb\x14\xe8\x83\xdc\xe2\xf1\x28\xe6\xf0\xe9\xf3\x3c\xa6\x0a\x21\xd6\xf5\x08\x8e\x76\x37\x8f\xab\xcb\x25\xbc\x97\x54\xe1\x78\x0e\x0f\x6e\x87\x04\x9e\x95\xb6\xd0\x21\x61\xfc\xa6\xd6\x6a\x5b\xc5\x34\x15\x6e\x64\x6b\x38\x7a\x38\x58\xb7\x9b\x0d\x52\x31\x60\xdd\x68\x5b\x22\x74\x08\xca\x59\xc1\x60\x11\x15\xb0\x83\xce\xd1\x1d\xc8\xb5\x6b\x19\xa4\x3d\x80\xe3\x1a\x29\x9c\xae\x6c\x29\x9e\x39\x1c\x0f\x3d\x7b\x70\x04\x8c\x56\x5a\xf6\x73\xa8\xf4\x0e\x41\x33\x48\xa8\x51\x1a\xae\x0f\xb0\x95\xfb\x18\x68\x2b\xf7\xaf\x63\xdc\x6b\xf8\xcf\xd5\xb3\x97\xcf\xff\xf7\x02\xfe\x0d\xff\x7d\x3e\x03\x38\xe6\xa1\xf6\x4d\x11\xd3\x2f\x3c\xf2\x1b\x5b\x3a\xa5\x6d\x95\x89\x96\x37\x8b\x97\x22\x4f\xbd\x79\xef\x2a\xf0\x2c\xad\x92\xa4\x00\x89\x60\x8b\xde\xcb\x0a\x7d\x48\x77\x34\xb8\x96\x07\x38\x24\x2a\x9c\xcd\x44\xe0\x81\x98\x43\xf8\x81\xd5\xab\x54\xdb\xd0\x28\x67\xb0\x30\xae\x8a\x44\xc9\x1f\xa6\xe2\x5a\xbe\xbc\xf7\x9c\x40\x4f\x57\xd1\xa1\x60\x77\xc3\x14\x32\x3f\x05\x0b\x28\x48\xe4\x48\xcc\x63\xd6\x23\x0a\xd7\xe4\x3a\xb0\xd8\xc1\x9b\x60\xce\x44\xe5\x16\xa5\x71\xad\x5a\x6c\x12\x83\x09\x4b\xd4\x3b\x8c\xa7\x1d\xf6\x9f\x43\x97\xc6\x79\x0c\xa6\xbd\xe6\x9f\x9c\xc2\x09\x5f\x6f\x20\x1b\x57\x5f\xc1\x55\x9e\xd6\x43\xfe\xdc\x92\x1d\x6f\x46\x76\x92\xc3\x4d\x88\x1b\x76\xa1\x82\xd6\xfa\xb6\x0c\xdc\xdb\xb4\xc6\x1c\xa0\xd3\x5c\x43\xe9\x14\xae\x04\x3c\x1d\xe3\xe5\xf3\xf3\x72\xe4\x31\xca\x71\xf6\x68\xa4\xd6\x98\x47\x37\x1c\x87\x2e\xff\x41\x9a\x31\xb2\x56\xdb\xa6\xe5\xbe\xf2\xb1\xc1\x4a\xdb\x13\xa2\x74\xc1\x2f\xfb\xf9\xe6\xd7\x0f\x85\x8f\x45\xd7\x9b\x43\xdf\xc8\xfc\xc4\x0b\xad\xca\xf2\xd9\x71\x36\x5b\x2e\xe1\x9d\xb4\xca\x20\xd4\xcc\xcd\xc0\xde\x49\x31\xea\x68\x7c\x17\x6c\x19\xe1\xb7\x98\x63\x5f\xb0\x9d\xa4\xc1\xfd\xb5\x53\x87\x90\xa6\xef\x34\x97\x75\x74\x2c\x2a\xe4\x4c\x94\xce\x32\x5a\x5e\xf0\xa1\x41\x91\x0f\x85\x2e\xa5\x47\x10\xb2\x69\x8c\x2e\x65\x88\xb2\xfc\xea\x9d\x15\xd7\x63\x17\x46\x50\x58\xc1\xd9\x49\x02\xf4\xda\xa9\x43\x9e\x9c\xd7\x84\xf2\xee\x02\xea\x7e\xd1\x75\xdd\x62\xe3\x68\xbb\x68\xc9\x60\xb8\x3e\xa8\xc6\x30\xcb\x25\xdc\xd6\x08\x01\x2c\xe8\x95\x47\x82\x8d\x23\x88\x4c\x1b\x55\xce\x83\x72\xe1\x22\xd5\xda\xcf\xc1\x3b\xf8\xda\x06\x15\x33\xf2\x00\xd2\x38\x5b\x4d\x50\x91\x04\x9a\x83\x13\x51\xb8\xde\xf6\x5f\xf0\x8b\x3c\xac\xa3\x82\xf8\xda\xb5\x46\xf5\x1a\x48\x6d\xc9\xe0\xdd\x16\xe1\x4e\x5b\x05\x6e\x13\x84\xac\x41\x9a\xa0\x42\xc2\x43\x11\x62\x7a\xff\x0f\x5a\x62\x1d\x17\x41\xa5\x85\x87\x3b\xc4\x26\xa8\x49\xc8\x0a\x3a\x79\x88\x79\x5b\xd7\xcd\x41\xfa\xd3\xc3\x69\x0f\xda\x43\xed\xba\xef\x0e\xb5\xc6\x5a\xee\xd0\x17\x53\xc5\x83\xc0\x9c\xf5\x6b\xfe\x48\x8f\xf2\x7f\xba\x47\xae\x64\xe4\x85\x67\x42\xb9\xbd\xc0\x80\x01\xee\x02\x1a\xe3\x9e\x97\x8d\x91\xfa\x12\x83\x2e\xec\x3f\xce\x12\x89\xc3\x2d\xfe\x9d\x4c\xf2\x6c\xc8\xb1\x2b\x9d\x81\xa7\x20\xae\x97\xcb\x70\xa5\x47\x3a\xd7\xce\xb3\xc8\xd3\x8a\x23\x5d\x69\x2b\xc3\xd6\x01\x29\x5c\xa1\xdf\x52\xe3\x56\x89\xec\x22\x84\x16\xd7\xa7\x39\xf5\xcf\x95\xa8\x51\x2a\x24\xdf\xdb\x8a\xf4\x95\x6c\x5b\xe4\xda\xa9\x64\xea\x3f\x92\x85\x70\xeb\x18\xbf\x48\xa5\x28\x99\x75\x93\x4c\x2d\x19\x71\x3d\x1c\x67\x38\x61\x10\xcc\xec\x24\xb1\x39\x64\x48\x14\xef\x71\x6b\x38\x3f\x93\x45\xa2\x49\x0d\xc3\x33\x51\x46\xe5\x84\xe7\x57\x57\x69\xb1\x17\x67\x24\x4a\x62\x16\x7f\xc2\xf0\xd0\xbf\x04\x10\x84\xac\x57\x71\x3a\x8c\x48\xc9\x16\x69\x12\xaf\x5a\x96\xa2\xf7\x20\x50\xca\x28\x1b\xb8\x7f\x10\x3c\xa0\x4d\x02\xfc\x56\x6a\xd3\xbf\xc0\x11\x61\x78\x08\x7a\xc1\xbc\x86\x5e\x7a\xf3\x1f\x4e\x9d\xd0\x17\x9e\x25\xb7\x3e\x8a\x64\xfa\xff\x4b\xd8\x9c\x4f\x0e\xc8\xbd\x35\x35\xe9\xd4\x62\x55\xd6\x3f\xe0\x45\x98\x7e\x7a\xb7\xd0\xf2\x39\x88\xb5\xf4\xf8\xe2\x99\xc8\x93\x8e\xf7\x6a\x7b\x7f\x1f\x2a\x5d\xdc\x92\xae\x2a\xa4\x77\xb7\xb7\x1f\xe1\x78\x9c\xe1\xbe\x71\xc4\xfe\x93\xf8\x7e\xf0\xf9\x0c\xab\x69\xe8\x3a\xd3\xe0\xf4\x8c\x4c\x22\x3d\xd9\x67\xc7\x14\x0d\x8d\xc7\x1f\x0a\x81\x3b\xb4\x7c\x3e\x1f\x9e\x8e\x05\x22\x7a\x84\xb7\x35\xfc\xe6\x8f\x5a\x8b\xf8\xf7\xb6\xd7\x91\xb3\x95\x0b\x3b\x08\xbd\x6b\xa9\x9c\x36\x0c\x0b\x17\xfc\xd3\x08\x32\x7d\xe4\x03\xdd\xa7\xa5\x87\x6c\xbf\x61\xfa\x2b\xc2\x9f\x3f\xca\x69\xaa\x78\x40\xf3\x1e\xe8\x31\x32\x07\xf0\x11\x37\xb9\x3d\x79\x92\x36\x14\x71\x52\xf9\x3b\x93\xc6\x03\xff\xd3\x91\xe1\x6c\x56\x10\x69\x06\x11\x23\xbb\x52\xbb\xad\x82\xe3\xf1\xcf\x00\x00\x00\xff\xff\x4e\x22\x45\x2d\x0e\x0c\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 3086, mode: os.FileMode(420), modTime: time.Unix(1494439695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x4b\xcc\x4d\x55\xb2\x52\x50\xaa\xae\xd6\x73\x2b\xcd\x4b\x2e\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\x55\xd2\x01\x49\x97\xa5\x16\x15\x67\xe6\xe7\x81\x54\x18\xe8\x19\xe8\x19\x40\x44\x53\x52\x0b\x52\xf3\x52\x52\xf3\x92\x33\x53\x8b\x95\xac\x14\x40\x06\x81\x44\xf3\x4b\x52\xf3\xca\x40\x4a\xe3\x4c\xc0\x6a\xb9\x14\x14\x6a\xb9\x6a\x01\x01\x00\x00\xff\xff\xe6\x48\x09\x7c\x67\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 103, mode: os.FileMode(420), modTime: time.Unix(1493816950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

