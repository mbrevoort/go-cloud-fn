// Code generated by go-bindata.
// sources:
// index.js
// package.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x6d\x8f\xe3\xb6\x11\xfe\xae\x5f\x31\x01\x8a\x50\xea\xc9\xd2\x26\xc8\xa5\xc1\x02\x4e\x8b\x14\xb7\xb8\x16\x69\x7a\xcd\x6e\xd1\x0f\xc1\xe1\x42\x8b\x63\x89\xb7\x34\xa9\x23\x87\x96\x8d\x85\xff\x7b\x41\x8a\x92\x5f\x76\x0d\xdc\x01\xf9\xb2\x6b\x71\xde\x9e\x79\xe1\xc3\xd9\x72\x0b\xbd\x5f\x39\xbf\x82\x25\x58\xfc\xe4\xa5\xc5\x9c\xfd\xad\x35\xa6\x55\xb8\x68\x94\xf1\xa2\x1e\xe5\xac\xc8\x8b\x6c\xd6\x10\x86\x50\x6f\x59\x51\x35\x46\xaf\x65\x9b\x17\x59\xb6\xf6\xba\x21\x69\x34\xb8\x4e\x6e\x20\x17\x9c\x78\x09\x0d\x57\x6a\xc5\x9b\xc7\x02\x9e\x32\x00\x85\x04\x16\x5d\x6f\xb4\xc3\x77\x7c\xaf\x0c\x17\xb0\x04\xc6\xb2\x0c\xa0\xae\xe1\xbe\xe7\x83\x06\xea\x10\x66\x5f\x5c\x0b\x90\xfa\x23\x36\x14\xcf\x51\x6f\x61\x6d\xcd\x26\x7e\xf4\xdc\xa2\x26\xe8\xad\x69\xd0\xb9\x2a\x03\x68\x8c\x76\x04\xfd\x69\x2a\x4d\x27\x95\xf8\x90\x74\x58\x51\xe1\x0e\x9b\x3b\xa9\x30\x67\x55\xfd\xf4\x54\xdd\xa5\x40\xbf\xf0\x0d\x1e\x0e\xac\x84\xdf\xde\x97\x11\x2a\x84\x58\xb7\xb3\x73\xd4\xdb\x32\x9e\xd6\x35\xfc\xcc\x6d\x8b\x73\x1e\x0e\xcc\x16\x2d\x38\x12\x52\xc3\x80\x16\xe3\xb7\xf5\x5a\xea\x36\xc2\x14\xb8\xe6\x5e\x51\xd4\x30\xb0\xf2\xeb\x35\xda\x6a\xf2\x75\x2f\x75\x83\x30\x20\x08\xa3\x19\x81\x46\x14\x40\x06\x06\x63\x1f\x81\xaf\x8c\x27\xe0\x7a\x0f\x86\x3a\xb4\x21\xbb\xc6\xdb\x98\x73\x48\x0f\x1d\x39\x30\x16\x08\x35\xd7\xe4\x4a\x68\xe5\x16\x41\x12\x70\xe8\x90\x2b\xea\xf6\xb0\xe1\xbb\x18\x68\xc3\x77\x3f\xc5\xb8\xb7\xf0\xcd\xcd\x77\x3f\xbc\xfe\xcb\xf7\xf0\x67\xf8\xf6\x75\x06\x70\x28\x42\xed\xfb\x2a\xc2\xaf\x1c\xd2\x1b\xdd\x18\x21\x75\x9b\x33\x4f\xeb\xc5\x0f\xac\x48\xbd\xf9\xd9\xb4\xe0\x88\x6b\xc1\xad\x00\xb4\x16\x36\xe8\x1c\x6f\xd1\x05\xb8\xb3\xc0\x78\x9a\xdc\xa1\xb5\x95\xd1\x39\x0b\x73\xc0\x4a\x08\xff\x60\xf9\x63\xaa\x6d\x68\x94\x51\x58\x29\xd3\xc6\x41\x29\xce\xa1\x18\x4f\xd7\x6d\x2f\x07\xe8\xd5\x32\x2a\x54\x64\xee\xc9\x06\xe4\xa7\xce\x82\x17\xb4\xd6\x58\x56\x46\xd4\xb3\x17\xea\xac\x19\x40\xe3\x00\x6f\x82\x38\x67\xad\x19\xc7\x7d\xb1\x4e\x13\x6c\xb1\x41\xb9\xc5\x98\xed\x64\x7f\xe9\xba\x51\xc6\x61\x10\xed\x24\xfd\xdd\x08\x3c\xfa\x97\x6b\xc8\xe7\xd3\x1f\xe1\xa6\x48\xe7\x01\x3f\x79\xab\xe7\x9b\x91\x9f\x60\xb8\x0f\x71\x83\x15\x0a\xf0\xda\xf9\x26\xcc\xde\xda\x2b\xb5\x87\x41\x52\x07\x8d\x11\xb8\x64\xf0\x6a\x8e\x57\x94\x97\xe5\x28\x62\x94\x43\xf6\x62\x24\xaf\xd4\x8b\x06\x87\xa9\xcb\xff\xb3\x92\x30\x4e\xad\xd4\xbd\xa7\xb1\xf2\xb1\xc1\x42\xea\x93\x41\x19\x82\x5e\xfe\xcf\xfb\x7f\xff\x52\xb9\x58\x74\xb9\xde\x8f\x8d\x2c\x4e\xb4\x50\x8b\xbc\xc8\x0e\x59\x56\xd7\xf0\x96\x6b\xa1\x10\x3a\xa2\x7e\x9a\xde\x23\x63\x74\x51\xf8\x36\xc8\x72\x8b\x9f\x22\xc6\xb1\x60\x81\x9f\x92\xfa\x4f\x46\xec\x03\x4c\x37\x48\x6a\xba\xa8\x58\xb5\x48\x39\x6b\x8c\x26\xd4\xb4\xa0\x7d\x8f\xac\x98\x0a\xdd\x70\x87\xc0\x78\xdf\x2b\xd9\xf0\x10\xa5\xfe\xe8\x8c\x66\xb7\x73\x17\x66\xa7\xb0\x84\x8b\x4c\x82\xeb\x95\x11\xfb\x22\x29\xaf\x2c\xf2\xc7\x2b\x5e\x77\x8b\x61\x18\x16\x6b\x63\x37\x0b\x6f\x15\x86\xeb\x83\x62\x0e\x53\xd7\xf0\xd0\x21\x04\x67\x81\xaf\x1c\x5a\x58\x1b\x0b\x71\xd2\x66\x96\x73\x20\x4c\xb8\x48\x9d\x74\x25\x38\x03\x1f\x7d\x60\x31\xc5\xf7\xc0\x95\xd1\xed\xd1\x55\x1c\x02\x49\x41\xc9\xda\x70\xbd\xf5\x57\xf0\x2f\xbe\x5f\x45\x06\x71\x9d\xf1\x4a\x8c\x1c\x68\x7d\x43\xe0\xcc\x06\xe1\x51\x6a\x01\x66\x1d\x88\xac\x47\x7b\x74\x15\x00\x4f\x45\x88\xf0\xfe\x1a\xb8\x44\x1b\xaa\x02\x4b\x33\x07\x8f\x88\x7d\x60\x93\x80\x0a\x06\xbe\x8f\xb8\xb5\x19\x4a\xe0\xee\x34\x39\xe9\x40\x3a\xe8\xcc\xf0\x2c\xa9\x15\x76\x7c\x8b\xae\x3a\x56\x3c\x10\xcc\x45\xbf\xca\x17\x7a\x54\xfc\xd1\x3d\x32\x0d\x21\x2d\x1c\x59\xe4\x9b\x2b\x13\x30\xb9\xbb\xe2\x8d\x70\x47\x75\xaf\xb8\xbc\x36\x41\x57\xec\x0f\x59\x1a\xe2\x70\x8b\xff\x6b\x55\xd2\xec\xad\x21\xd3\x18\x05\xaf\x80\xdd\xd6\x75\xb8\xd2\xf3\x38\x77\xc6\x11\x2b\xd2\x89\xb1\xb2\x95\x9a\x07\xd3\xc9\x53\xb8\x42\xbf\xa6\xc6\x2d\xd3\xb0\xb3\x10\x9a\xdd\x9e\x62\x1a\x9f\x2b\xd6\x21\x17\x68\xdd\x28\xab\xd2\x57\x92\x6d\x90\x3a\x23\x92\x68\xfc\x48\x12\x8b\x1b\x43\xf8\x81\x0b\x61\x93\x58\xf6\x49\xe4\xad\x62\xb7\x53\x3a\x53\x86\x81\x30\xf3\x13\x60\x25\xe4\x68\x6d\xbc\xc7\x5e\x51\x71\x41\x8b\xd6\x1e\xd9\x30\x3c\x13\x4d\x64\x4e\x78\x7d\x73\x93\x0e\x47\x72\x46\x6b\x13\x99\xc5\x7f\x61\x79\x18\x5f\x02\x08\x44\x36\xb2\xb8\xdd\xcf\x9e\x92\x2c\x8e\x49\xbc\x6a\x79\x8a\x3e\x3a\x81\x86\x47\xda\xc0\xdd\x59\xf0\xe0\xed\x48\xc0\x77\x5c\xaa\xf1\x05\x8e\x1e\xa6\x87\x60\x24\xcc\x5b\x18\xa9\xb7\xf8\x62\xe8\x16\x5d\xe5\x88\x93\x77\x91\x24\xd3\xef\x0f\xc1\xb8\x38\x2a\x20\x8d\xd2\xd4\xa4\x53\x89\x16\xf9\xf8\x80\x57\x61\xfb\x19\xd5\x42\xcb\x4b\x60\x2b\xee\xf0\xfb\xef\x58\x91\x78\xfc\x70\xb2\x88\x91\xe9\x65\x73\x67\xcd\xe6\x57\x74\xc6\xdb\x06\x03\x69\x8e\xbf\x8e\xfb\x58\xcf\x2d\xb9\x38\x96\xa3\xa4\x72\xbd\x92\x94\xb3\x68\xec\xea\x78\x19\x43\xd7\xa2\x5e\xa5\x50\xb7\xd4\xc1\x72\x09\xdf\x16\xf3\x7b\x1c\x5f\x99\x71\x4b\xac\xa2\xd9\xa8\xfc\xdb\x37\xef\x23\xa8\x6c\xd6\x89\x7d\x3b\x45\x68\x91\xec\xfe\x9d\x5f\xdd\xfb\x15\xe4\xb8\x45\x4d\x25\x4c\x23\x1f\x5b\x72\xb9\x41\x9e\x2e\x0e\xbf\xff\xc7\xa3\xc7\xb0\x66\x45\x37\x81\xe5\x92\xab\xe8\x09\xfe\xf4\x14\xff\x57\xf1\xef\x3f\xc4\xe1\xf7\xf8\xca\x9d\x8c\xd1\x28\x0e\x1f\xe9\x3c\x82\x87\xe5\xf3\xc2\x8d\xd8\xaa\xb9\x7a\xa9\x26\x5f\x45\xc5\xe2\x85\xa5\x86\x9d\x66\xb6\x1e\xa7\x6a\x85\x0d\xf7\x0e\x53\x14\xaf\x1f\xb5\x19\x26\xb2\xbb\x7c\xaa\xcf\x8a\x50\x4c\xd7\x2c\x5a\x56\xbd\x5f\x29\xe9\xba\xfc\x29\x20\x3f\x94\x90\xf7\x7e\xf5\x26\xdc\xa9\xb3\x5b\x36\x1d\x4e\xb3\xfe\x99\xe8\x58\x09\xc9\xf2\xca\xba\xf2\x0c\xd9\x3c\xe5\x75\x0d\x8e\xa4\x52\x93\x49\x58\x23\x26\xed\x71\x89\x8a\x6f\xc8\xd9\x7e\x1f\xd6\x71\x1f\x7e\x25\xae\xbd\x9a\xfe\xb4\x47\x3c\x3d\x85\xec\xaa\x07\x2b\xdb\x16\xed\xdb\x87\x87\x77\x70\x38\x64\xb8\xeb\x4d\x98\x38\xf6\x7c\xa5\x7f\x0f\xcb\x63\xb8\x8b\xed\x22\x01\x3d\xae\x1f\x47\x79\x76\x48\xd1\x50\x39\xfc\xa2\x10\x69\x8c\xcf\xe7\x36\x12\xe4\x71\xde\xce\xf9\xf1\x9e\x2e\x9b\x77\x46\x91\x09\xe5\x49\xcf\xa6\x18\xd1\xc7\x1c\xe8\x92\x2c\x47\xe7\x2f\x51\x62\x08\x38\xc7\x4a\x6a\x5f\x7f\x9d\x0c\xaa\xd8\xaa\xcf\x09\x7f\x24\xce\x33\xcb\xe7\x90\xce\x7a\x3b\x6e\xa1\x2c\x6d\xb7\x6c\xee\x6e\x2a\xb7\x16\x70\x38\xfc\x3f\x00\x00\xff\xff\x6d\x81\xf4\x28\x97\x0e\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 3735, mode: os.FileMode(420), modTime: time.Unix(1494441374, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\xcc\x5a\x63\x0a\xae\xba\x72\xe5\xd2\x23\x08\x6d\xf2\x28\x81\x76\xa6\x98\xa6\x08\x21\x77\x97\xa1\xe0\xf6\xbd\x8f\xbf\x76\x44\x2c\xe3\x0a\x1e\x88\x6b\x75\xcf\x22\x61\x4f\x2a\xaf\x71\x45\x6b\x7c\xb1\xfb\xc0\x27\x27\x15\x13\xde\x79\xe7\xcf\x35\x62\x83\x44\x48\x48\xc8\x3c\x90\x85\x6c\xd5\x1d\x72\x18\x7d\xdf\xff\x96\x88\x1f\xb3\xea\xbc\xe0\x1a\x16\x2d\xf1\xb6\x95\x29\x97\xe9\x0c\xf6\xbd\xfb\x72\x47\xd4\xba\xf6\x0b\x00\x00\xff\xff\xc2\x5c\xfd\x85\x8d\x00\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 141, mode: os.FileMode(420), modTime: time.Unix(1494442094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"package.json": packageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"package.json": &bintree{packageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

